
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package inteprete;

import java.util.LinkedList;
import ast.general.NodoAST;
import ast.AST;
import java_cup.runtime.Symbol;
import ast.expresiones.Literal;
import entorno.Tipo;
import ast.general.Instruccion;
import ast.general.Expresion;
import ast.instrucciones.Bloque;
import ast.instrucciones.Declaracion;
import ast.instrucciones.PrintTabla;
import ast.instrucciones.Asignacion;
import ast.expresiones.Identificador;
import ast.expresiones.operaciones.Aritmetica;
import ast.expresiones.operaciones.Operacion.Operador;
import entorno.Tipo.Tipos;
import ast.instrucciones.Print;
import ast.expresiones.operaciones.OperadorPost;
import ast.expresiones.operaciones.Relacional;
import ast.expresiones.operaciones.Logica;
import ast.expresiones.operaciones.Ternaria;
import ast.instrucciones.If;
import ast.instrucciones.While;
import ast.instrucciones.Break;
import ast.instrucciones.For;
import ast.expresiones.Var;
import ast.expresiones.IniciarArreglo;
import ast.expresiones.generarArrreglo;
import ast.instrucciones.fantasma;
import ast.Nativo.Modificador;
import ast.instrucciones.Clase;
import ast.instrucciones.Funcion;
import ast.instrucciones.Constructor;
import ast.Nativo.Modificador.TipoMod;
import entorno.Simbolo;
import entorno.Simbolo.Rol;
import ast.expresiones.Llama;
import ast.expresiones.Return;
import ast.expresiones.Instancia;
import java.util.LinkedList;
import ast.expresiones.Acceso;
import ast.expresiones.AccesoAsig;
import ast.instrucciones.Println;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\223\000\002\002\004\000\002\002\003\000\002\037" +
    "\004\000\002\031\004\000\002\031\003\000\002\050\004" +
    "\000\002\050\003\000\002\047\003\000\002\047\003\000" +
    "\002\047\003\000\002\047\003\000\002\054\006\000\002" +
    "\056\005\000\002\056\003\000\002\057\003\000\002\032" +
    "\010\000\002\032\012\000\002\043\003\000\002\043\002" +
    "\000\002\033\004\000\002\033\003\000\002\035\005\000" +
    "\002\051\012\000\002\052\003\000\002\052\002\000\002" +
    "\045\005\000\002\045\003\000\002\053\005\000\002\053" +
    "\004\000\002\055\005\000\002\055\003\000\002\040\006" +
    "\000\002\040\004\000\002\041\002\000\002\041\011\000" +
    "\002\041\010\000\002\041\010\000\002\041\007\000\002" +
    "\046\005\000\002\046\004\000\002\044\004\000\002\044" +
    "\003\000\002\044\002\000\002\042\003\000\002\042\003" +
    "\000\002\042\003\000\002\042\003\000\002\042\003\000" +
    "\002\042\003\000\002\006\007\000\002\006\005\000\002" +
    "\006\007\000\002\006\005\000\002\025\004\000\002\025" +
    "\003\000\002\024\003\000\002\024\004\000\002\027\005" +
    "\000\002\027\004\000\002\003\005\000\002\004\004\000" +
    "\002\004\003\000\002\005\003\000\002\005\004\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\004\000\002\005\003\000\002\022\004\000\002" +
    "\021\014\000\002\030\003\000\002\030\003\000\002\013" +
    "\007\000\002\014\007\000\002\012\006\000\002\010\006" +
    "\000\002\060\005\000\002\060\003\000\002\060\003\000" +
    "\002\060\003\000\002\060\005\000\002\060\006\000\002" +
    "\060\004\000\002\020\004\000\002\017\011\000\002\011" +
    "\011\000\002\011\015\000\002\011\013\000\002\016\004" +
    "\000\002\016\004\000\002\023\004\000\002\023\003\000" +
    "\002\026\006\000\002\026\005\000\002\036\005\000\002" +
    "\036\005\000\002\034\005\000\002\034\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\015\003\000" +
    "\002\015\004\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\010\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\004\000\002\015\007\000\002\015\005\000\002\015" +
    "\003\000\002\015\005\000\002\015\007\000\002\015\006" +
    "\000\002\015\005\000\002\015\006\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\004\000\002\015" +
    "\003\000\002\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011b\000\022\004\uffef\006\uffef\007\uffef\010\uffef\011" +
    "\uffef\012\uffef\013\uffef\015\011\001\002\000\020\004\uffd7" +
    "\006\026\007\024\010\017\011\020\012\027\013\016\001" +
    "\002\000\022\004\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0" +
    "\012\ufff0\013\ufff0\015\011\001\002\000\022\004\uffed\006" +
    "\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed\015\uffed" +
    "\001\002\000\004\002\000\001\002\000\004\002\014\001" +
    "\002\000\004\104\012\001\002\000\004\070\013\001\002" +
    "\000\022\004\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012" +
    "\uffec\013\uffec\015\uffec\001\002\000\004\002\001\001\002" +
    "\000\022\004\uffee\006\uffee\007\uffee\010\uffee\011\uffee\012" +
    "\uffee\013\uffee\015\uffee\001\002\000\036\004\uffd1\006\uffd1" +
    "\007\uffd1\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\026" +
    "\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\103\uffd1\001\002" +
    "\000\036\004\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012" +
    "\uffd4\013\uffd4\014\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4" +
    "\032\uffd4\103\uffd4\001\002\000\036\004\uffd3\006\uffd3\007" +
    "\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\026\uffd3" +
    "\027\uffd3\030\uffd3\031\uffd3\032\uffd3\103\uffd3\001\002\000" +
    "\004\004\032\001\002\000\022\002\uffff\004\uffd7\006\026" +
    "\007\024\010\017\011\020\012\027\013\016\001\002\000" +
    "\036\004\uffd8\006\026\007\024\010\017\011\020\012\027" +
    "\013\016\014\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032" +
    "\uffd8\103\uffd8\001\002\000\036\004\uffd5\006\uffd5\007\uffd5" +
    "\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\026\uffd5\027" +
    "\uffd5\030\uffd5\031\uffd5\032\uffd5\103\uffd5\001\002\000\022" +
    "\002\ufffd\004\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012" +
    "\ufffd\013\ufffd\001\002\000\036\004\uffd6\006\uffd6\007\uffd6" +
    "\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\026\uffd6\027" +
    "\uffd6\030\uffd6\031\uffd6\032\uffd6\103\uffd6\001\002\000\036" +
    "\004\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013" +
    "\uffd2\014\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2" +
    "\103\uffd2\001\002\000\022\004\uffd9\014\uffd9\026\uffd9\027" +
    "\uffd9\030\uffd9\031\uffd9\032\uffd9\103\uffd9\001\002\000\022" +
    "\002\ufffe\004\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012" +
    "\ufffe\013\ufffe\001\002\000\004\103\033\001\002\000\006" +
    "\005\035\071\034\001\002\000\042\004\uffd7\006\026\007" +
    "\024\010\017\011\020\012\027\013\016\014\uffd7\026\uffd7" +
    "\027\uffd7\030\uffd7\031\uffd7\032\uffd7\070\uffe0\071\uffe0\103" +
    "\uffd7\001\002\000\004\103\036\001\002\000\004\071\037" +
    "\001\002\000\042\004\uffd7\006\026\007\024\010\017\011" +
    "\020\012\027\013\016\014\uffd7\026\uffd7\027\uffd7\030\uffd7" +
    "\031\uffd7\032\uffd7\070\uffe0\071\uffe0\103\uffd7\001\002\000" +
    "\044\004\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7" +
    "\013\ufff7\014\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032" +
    "\ufff7\070\ufff7\071\ufff7\072\ufff7\103\ufff7\001\002\000\006" +
    "\070\u0119\071\u0118\001\002\000\022\004\032\014\053\026" +
    "\054\027\061\030\052\031\055\032\060\103\056\001\002" +
    "\000\044\004\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012" +
    "\ufff9\013\ufff9\014\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9" +
    "\032\ufff9\070\ufff9\071\ufff9\072\ufff9\103\ufff9\001\002\000" +
    "\044\004\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8" +
    "\013\ufff8\014\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032" +
    "\ufff8\070\ufff8\071\ufff8\072\ufff8\103\ufff8\001\002\000\044" +
    "\004\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013" +
    "\ufffb\014\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb" +
    "\070\ufffb\071\ufffb\072\ufffb\103\ufffb\001\002\000\044\004" +
    "\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa" +
    "\014\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\070" +
    "\ufffa\071\ufffa\072\ufffa\103\ufffa\001\002\000\044\004\uffd7" +
    "\006\026\007\024\010\017\011\020\012\027\013\016\014" +
    "\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\070\uffe0" +
    "\071\uffe0\072\051\103\uffd7\001\002\000\044\004\ufffc\006" +
    "\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc" +
    "\026\ufffc\027\ufffc\030\ufffc\031\ufffc\032\ufffc\070\ufffc\071" +
    "\ufffc\072\ufffc\103\ufffc\001\002\000\046\002\ufff1\004\ufff1" +
    "\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014" +
    "\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\070\ufff1" +
    "\071\ufff1\072\ufff1\103\ufff1\001\002\000\006\075\uff96\103" +
    "\uff96\001\002\000\006\075\uff92\103\uff92\001\002\000\006" +
    "\075\uff97\103\uff97\001\002\000\006\075\uff93\103\uff93\001" +
    "\002\000\004\065\256\001\002\000\006\075\066\103\063" +
    "\001\002\000\006\075\uff94\103\uff94\001\002\000\006\075" +
    "\uff95\103\uff95\001\002\000\010\067\uffcb\070\uffcb\103\uffcb" +
    "\001\002\000\014\065\252\067\uffca\070\uffca\075\246\103" +
    "\uffca\001\002\000\010\067\116\070\ufff4\103\115\001\002" +
    "\000\006\075\073\103\072\001\002\000\004\074\071\001" +
    "\002\000\004\070\070\001\002\000\044\004\ufff6\006\ufff6" +
    "\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\026" +
    "\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\070\ufff6\071\ufff6" +
    "\072\ufff6\103\ufff6\001\002\000\006\075\uffda\103\uffda\001" +
    "\002\000\004\065\075\001\002\000\004\074\074\001\002" +
    "\000\006\075\uffdb\103\uffdb\001\002\000\022\013\076\014" +
    "\053\026\054\027\061\030\052\031\055\032\060\066\102" +
    "\001\002\000\016\014\053\026\054\027\061\030\052\031" +
    "\055\032\060\001\002\000\006\066\uffe7\073\uffe7\001\002" +
    "\000\004\103\106\001\002\000\006\066\104\073\103\001" +
    "\002\000\006\070\uffde\071\uffde\001\002\000\020\013\076" +
    "\014\053\026\054\027\061\030\052\031\055\032\060\001" +
    "\002\000\006\070\uffdf\071\uffdf\001\002\000\006\066\uffe8" +
    "\073\uffe8\001\002\000\010\066\uffe3\073\uffe3\075\110\001" +
    "\002\000\006\066\uffe5\073\uffe5\001\002\000\004\074\111" +
    "\001\002\000\006\066\uffe4\073\uffe4\001\002\000\004\103" +
    "\106\001\002\000\006\066\uffe6\073\uffe6\001\002\000\010" +
    "\067\uffcc\070\uffcc\103\uffcc\001\002\000\012\067\uffca\070" +
    "\uffca\075\246\103\uffca\001\002\000\036\017\136\024\132" +
    "\025\126\037\122\051\133\056\130\061\123\065\117\071" +
    "\135\100\120\101\125\102\121\103\127\104\134\001\002" +
    "\000\036\017\136\024\132\025\126\037\122\051\133\056" +
    "\130\061\123\065\117\071\135\100\120\101\125\102\121" +
    "\103\127\104\134\001\002\000\056\041\uff76\042\uff76\043" +
    "\uff76\044\uff76\045\uff76\046\uff76\047\uff76\050\uff76\052\uff76" +
    "\053\uff76\054\uff76\055\uff76\056\uff76\057\uff76\060\uff76\062" +
    "\uff76\066\uff76\070\uff76\072\uff76\073\uff76\074\uff76\077\uff76" +
    "\001\002\000\056\041\uff75\042\uff75\043\uff75\044\uff75\045" +
    "\uff75\046\uff75\047\uff75\050\uff75\052\uff75\053\uff75\054\uff75" +
    "\055\uff75\056\uff75\057\uff75\060\uff75\062\uff75\066\uff75\070" +
    "\uff75\072\uff75\073\uff75\074\uff75\077\uff75\001\002\000\020" +
    "\014\053\026\054\027\061\030\052\031\055\032\060\103" +
    "\234\001\002\000\004\065\227\001\002\000\056\041\uff91" +
    "\042\uff91\043\uff91\044\uff91\045\uff91\046\uff91\047\uff91\050" +
    "\uff91\052\uff91\053\uff91\054\uff91\055\uff91\056\uff91\057\uff91" +
    "\060\uff91\062\uff91\066\uff91\070\uff91\072\uff91\073\uff91\074" +
    "\uff91\077\uff91\001\002\000\056\041\uff77\042\uff77\043\uff77" +
    "\044\uff77\045\uff77\046\uff77\047\uff77\050\uff77\052\uff77\053" +
    "\uff77\054\uff77\055\uff77\056\uff77\057\uff77\060\uff77\062\uff77" +
    "\066\uff77\070\uff77\072\uff77\073\uff77\074\uff77\077\uff77\001" +
    "\002\000\056\041\uff72\042\uff72\043\uff72\044\uff72\045\uff72" +
    "\046\uff72\047\uff72\050\uff72\052\uff72\053\uff72\054\uff72\055" +
    "\uff72\056\uff72\057\uff72\060\uff72\062\uff72\066\uff72\070\uff72" +
    "\072\uff72\073\uff72\074\uff72\077\uff72\001\002\000\066\041" +
    "\uff6f\042\uff6f\043\uff6f\044\uff6f\045\uff6f\046\uff6f\047\uff6f" +
    "\050\uff6f\052\uff6f\053\uff6f\054\uff6f\055\uff6f\056\uff6f\057" +
    "\uff6f\060\uff6f\062\uff6f\063\215\064\216\065\212\066\uff6f" +
    "\070\uff6f\072\uff6f\073\uff6f\074\uff6f\075\214\077\uff6f\001" +
    "\002\000\036\017\136\024\132\025\126\037\122\051\133" +
    "\056\130\061\123\065\117\071\135\100\120\101\125\102" +
    "\121\103\127\104\134\001\002\000\056\041\uff70\042\uff70" +
    "\043\uff70\044\uff70\045\uff70\046\uff70\047\uff70\050\uff70\052" +
    "\uff70\053\uff70\054\uff70\055\uff70\056\uff70\057\uff70\060\uff70" +
    "\062\uff70\066\uff70\070\uff70\072\uff70\073\uff70\074\uff70\077" +
    "\uff70\001\002\000\056\041\uff73\042\uff73\043\uff73\044\uff73" +
    "\045\uff73\046\uff73\047\uff73\050\uff73\052\uff73\053\uff73\054" +
    "\uff73\055\uff73\056\uff73\057\uff73\060\uff73\062\uff73\066\uff73" +
    "\070\uff73\072\uff73\073\uff73\074\uff73\077\uff73\001\002\000" +
    "\036\017\136\024\132\025\126\037\122\051\133\056\130" +
    "\061\123\065\117\071\135\100\120\101\125\102\121\103" +
    "\127\104\134\001\002\000\056\041\uff74\042\uff74\043\uff74" +
    "\044\uff74\045\uff74\046\uff74\047\uff74\050\uff74\052\uff74\053" +
    "\uff74\054\uff74\055\uff74\056\uff74\057\uff74\060\uff74\062\uff74" +
    "\066\uff74\070\uff74\072\uff74\073\uff74\074\uff74\077\uff74\001" +
    "\002\000\036\017\136\024\132\025\126\037\122\051\133" +
    "\056\130\061\123\065\117\071\135\100\120\101\125\102" +
    "\121\103\127\104\134\001\002\000\056\041\uff7d\042\uff7d" +
    "\043\uff7d\044\uff7d\045\uff7d\046\uff7d\047\uff7d\050\uff7d\052" +
    "\uff7d\053\uff7d\054\uff7d\055\uff7d\056\uff7d\057\uff7d\060\uff7d" +
    "\062\uff7d\066\uff7d\070\uff7d\072\uff7d\073\uff7d\074\uff7d\077" +
    "\uff7d\001\002\000\004\070\ufff5\001\002\000\044\041\151" +
    "\042\142\043\146\044\144\045\152\046\154\047\153\050" +
    "\150\052\147\054\156\055\160\056\145\057\157\060\141" +
    "\062\155\070\ufff3\077\143\001\002\000\036\017\136\024" +
    "\132\025\126\037\122\051\133\056\130\061\123\065\117" +
    "\071\135\100\120\101\125\102\121\103\127\104\134\001" +
    "\002\000\036\017\136\024\132\025\126\037\122\051\133" +
    "\056\130\061\123\065\117\071\135\100\120\101\125\102" +
    "\121\103\127\104\134\001\002\000\036\017\136\024\132" +
    "\025\126\037\122\051\133\056\130\061\123\065\117\071" +
    "\135\100\120\101\125\102\121\103\127\104\134\001\002" +
    "\000\036\017\136\024\132\025\126\037\122\051\133\056" +
    "\130\061\123\065\117\071\135\100\120\101\125\102\121" +
    "\103\127\104\134\001\002\000\036\017\136\024\132\025" +
    "\126\037\122\051\133\056\130\061\123\065\117\071\135" +
    "\100\120\101\125\102\121\103\127\104\134\001\002\000" +
    "\036\017\136\024\132\025\126\037\122\051\133\056\130" +
    "\061\123\065\117\071\135\100\120\101\125\102\121\103" +
    "\127\104\134\001\002\000\036\017\136\024\132\025\126" +
    "\037\122\051\133\056\130\061\123\065\117\071\135\100" +
    "\120\101\125\102\121\103\127\104\134\001\002\000\036" +
    "\017\136\024\132\025\126\037\122\051\133\056\130\061" +
    "\123\065\117\071\135\100\120\101\125\102\121\103\127" +
    "\104\134\001\002\000\036\017\136\024\132\025\126\037" +
    "\122\051\133\056\130\061\123\065\117\071\135\100\120" +
    "\101\125\102\121\103\127\104\134\001\002\000\036\017" +
    "\136\024\132\025\126\037\122\051\133\056\130\061\123" +
    "\065\117\071\135\100\120\101\125\102\121\103\127\104" +
    "\134\001\002\000\036\017\136\024\132\025\126\037\122" +
    "\051\133\056\130\061\123\065\117\071\135\100\120\101" +
    "\125\102\121\103\127\104\134\001\002\000\036\017\136" +
    "\024\132\025\126\037\122\051\133\056\130\061\123\065" +
    "\117\071\135\100\120\101\125\102\121\103\127\104\134" +
    "\001\002\000\036\017\136\024\132\025\126\037\122\051" +
    "\133\056\130\061\123\065\117\071\135\100\120\101\125" +
    "\102\121\103\127\104\134\001\002\000\036\017\136\024" +
    "\132\025\126\037\122\051\133\056\130\061\123\065\117" +
    "\071\135\100\120\101\125\102\121\103\127\104\134\001" +
    "\002\000\036\017\136\024\132\025\126\037\122\051\133" +
    "\056\130\061\123\065\117\071\135\100\120\101\125\102" +
    "\121\103\127\104\134\001\002\000\036\017\136\024\132" +
    "\025\126\037\122\051\133\056\130\061\123\065\117\071" +
    "\135\100\120\101\125\102\121\103\127\104\134\001\002" +
    "\000\056\041\uff8f\042\uff8f\043\uff8f\044\uff8f\045\uff8f\046" +
    "\uff8f\047\uff8f\050\uff8f\052\uff8f\053\uff8f\054\uff8f\055\uff8f" +
    "\056\uff8f\057\157\060\141\062\155\066\uff8f\070\uff8f\072" +
    "\uff8f\073\uff8f\074\uff8f\077\143\001\002\000\056\041\uff8d" +
    "\042\uff8d\043\uff8d\044\uff8d\045\uff8d\046\uff8d\047\uff8d\050" +
    "\uff8d\052\uff8d\053\uff8d\054\uff8d\055\uff8d\056\uff8d\057\uff8d" +
    "\060\uff8d\062\uff8d\066\uff8d\070\uff8d\072\uff8d\073\uff8d\074" +
    "\uff8d\077\143\001\002\000\044\041\151\042\142\043\146" +
    "\044\144\045\152\046\154\047\153\050\150\052\147\053" +
    "\164\054\156\055\160\056\145\057\157\060\141\062\155" +
    "\077\143\001\002\000\036\017\136\024\132\025\126\037" +
    "\122\051\133\056\130\061\123\065\117\071\135\100\120" +
    "\101\125\102\121\103\127\104\134\001\002\000\056\041" +
    "\151\042\142\043\146\044\144\045\152\046\154\047\153" +
    "\050\150\052\147\053\uff7f\054\156\055\160\056\145\057" +
    "\157\060\141\062\155\066\uff7f\070\uff7f\072\uff7f\073\uff7f" +
    "\074\uff7f\077\143\001\002\000\056\041\uff8b\042\uff8b\043" +
    "\uff8b\044\uff8b\045\uff8b\046\uff8b\047\uff8b\050\uff8b\052\uff8b" +
    "\053\uff8b\054\uff8b\055\uff8b\056\uff8b\057\uff8b\060\uff8b\062" +
    "\uff8b\066\uff8b\070\uff8b\072\uff8b\073\uff8b\074\uff8b\077\143" +
    "\001\002\000\056\041\uff86\042\uff86\043\uff86\044\uff86\045" +
    "\uff86\046\uff86\047\uff86\050\uff86\052\uff86\053\uff86\054\uff86" +
    "\055\160\056\145\057\157\060\141\062\155\066\uff86\070" +
    "\uff86\072\uff86\073\uff86\074\uff86\077\143\001\002\000\056" +
    "\041\151\042\142\043\146\044\144\045\152\046\154\047" +
    "\uff83\050\150\052\147\053\uff83\054\uff83\055\160\056\145" +
    "\057\157\060\141\062\155\066\uff83\070\uff83\072\uff83\073" +
    "\uff83\074\uff83\077\143\001\002\000\056\041\uff85\042\uff85" +
    "\043\uff85\044\uff85\045\uff85\046\uff85\047\uff85\050\uff85\052" +
    "\uff85\053\uff85\054\uff85\055\160\056\145\057\157\060\141" +
    "\062\155\066\uff85\070\uff85\072\uff85\073\uff85\074\uff85\077" +
    "\143\001\002\000\056\041\uff88\042\uff88\043\uff88\044\uff88" +
    "\045\uff88\046\uff88\047\uff88\050\uff88\052\uff88\053\uff88\054" +
    "\uff88\055\160\056\145\057\157\060\141\062\155\066\uff88" +
    "\070\uff88\072\uff88\073\uff88\074\uff88\077\143\001\002\000" +
    "\056\041\151\042\142\043\146\044\144\045\152\046\154" +
    "\047\uff81\050\uff81\052\147\053\uff81\054\uff81\055\160\056" +
    "\145\057\157\060\141\062\155\066\uff81\070\uff81\072\uff81" +
    "\073\uff81\074\uff81\077\143\001\002\000\056\041\151\042" +
    "\142\043\146\044\144\045\152\046\154\047\uff82\050\uff82" +
    "\052\uff82\053\uff82\054\uff82\055\160\056\145\057\157\060" +
    "\141\062\155\066\uff82\070\uff82\072\uff82\073\uff82\074\uff82" +
    "\077\143\001\002\000\056\041\151\042\142\043\uff84\044" +
    "\uff84\045\152\046\154\047\uff84\050\uff84\052\uff84\053\uff84" +
    "\054\uff84\055\160\056\145\057\157\060\141\062\155\066" +
    "\uff84\070\uff84\072\uff84\073\uff84\074\uff84\077\143\001\002" +
    "\000\056\041\uff8e\042\uff8e\043\uff8e\044\uff8e\045\uff8e\046" +
    "\uff8e\047\uff8e\050\uff8e\052\uff8e\053\uff8e\054\uff8e\055\uff8e" +
    "\056\uff8e\057\157\060\141\062\155\066\uff8e\070\uff8e\072" +
    "\uff8e\073\uff8e\074\uff8e\077\143\001\002\000\056\041\151" +
    "\042\142\043\uff87\044\uff87\045\152\046\154\047\uff87\050" +
    "\uff87\052\uff87\053\uff87\054\uff87\055\160\056\145\057\157" +
    "\060\141\062\155\066\uff87\070\uff87\072\uff87\073\uff87\074" +
    "\uff87\077\143\001\002\000\056\041\uff7c\042\uff7c\043\uff7c" +
    "\044\uff7c\045\uff7c\046\uff7c\047\uff7c\050\uff7c\052\uff7c\053" +
    "\uff7c\054\uff7c\055\uff7c\056\uff7c\057\uff7c\060\uff7c\062\uff7c" +
    "\066\uff7c\070\uff7c\072\uff7c\073\uff7c\074\uff7c\077\uff7c\001" +
    "\002\000\056\041\uff89\042\uff89\043\uff89\044\uff89\045\uff89" +
    "\046\uff89\047\uff89\050\uff89\052\uff89\053\uff89\054\uff89\055" +
    "\160\056\145\057\157\060\141\062\155\066\uff89\070\uff89" +
    "\072\uff89\073\uff89\074\uff89\077\143\001\002\000\056\041" +
    "\uff8c\042\uff8c\043\uff8c\044\uff8c\045\uff8c\046\uff8c\047\uff8c" +
    "\050\uff8c\052\uff8c\053\uff8c\054\uff8c\055\uff8c\056\uff8c\057" +
    "\uff8c\060\uff8c\062\uff8c\066\uff8c\070\uff8c\072\uff8c\073\uff8c" +
    "\074\uff8c\077\143\001\002\000\006\072\205\073\206\001" +
    "\002\000\050\041\151\042\142\043\146\044\144\045\152" +
    "\046\154\047\153\050\150\052\147\054\156\055\160\056" +
    "\145\057\157\060\141\062\155\066\uff98\072\uff98\073\uff98" +
    "\077\143\001\002\000\056\041\uff9b\042\uff9b\043\uff9b\044" +
    "\uff9b\045\uff9b\046\uff9b\047\uff9b\050\uff9b\052\uff9b\053\uff9b" +
    "\054\uff9b\055\uff9b\056\uff9b\057\uff9b\060\uff9b\062\uff9b\066" +
    "\uff9b\070\uff9b\072\uff9b\073\uff9b\074\uff9b\077\uff9b\001\002" +
    "\000\036\017\136\024\132\025\126\037\122\051\133\056" +
    "\130\061\123\065\117\071\135\100\120\101\125\102\121" +
    "\103\127\104\134\001\002\000\050\041\151\042\142\043" +
    "\146\044\144\045\152\046\154\047\153\050\150\052\147" +
    "\054\156\055\160\056\145\057\157\060\141\062\155\066" +
    "\uff99\072\uff99\073\uff99\077\143\001\002\000\056\041\uff80" +
    "\042\uff80\043\uff80\044\uff80\045\uff80\046\uff80\047\uff80\050" +
    "\uff80\052\uff80\053\uff80\054\uff80\055\uff80\056\uff80\057\uff80" +
    "\060\uff80\062\uff80\066\uff80\070\uff80\072\uff80\073\uff80\074" +
    "\uff80\077\143\001\002\000\056\041\uff90\042\uff90\043\uff90" +
    "\044\uff90\045\uff90\046\uff90\047\uff90\050\uff90\052\uff90\053" +
    "\uff90\054\uff90\055\uff90\056\uff90\057\uff90\060\uff90\062\uff90" +
    "\066\uff90\070\uff90\072\uff90\073\uff90\074\uff90\077\143\001" +
    "\002\000\040\017\136\024\132\025\126\037\122\051\133" +
    "\056\130\061\123\065\117\066\224\071\135\100\120\101" +
    "\125\102\121\103\127\104\134\001\002\000\060\041\uff71" +
    "\042\uff71\043\uff71\044\uff71\045\uff71\046\uff71\047\uff71\050" +
    "\uff71\052\uff71\053\uff71\054\uff71\055\uff71\056\uff71\057\uff71" +
    "\060\uff71\062\uff71\066\uff71\070\uff71\072\uff71\073\uff71\074" +
    "\uff71\075\221\077\uff71\001\002\000\036\017\136\024\132" +
    "\025\126\037\122\051\133\056\130\061\123\065\117\071" +
    "\135\100\120\101\125\102\121\103\127\104\134\001\002" +
    "\000\056\041\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1\046" +
    "\uffa1\047\uffa1\050\uffa1\052\uffa1\053\uffa1\054\uffa1\055\uffa1" +
    "\056\uffa1\057\uffa1\060\uffa1\062\uffa1\066\uffa1\070\uffa1\072" +
    "\uffa1\073\uffa1\074\uffa1\077\uffa1\001\002\000\056\041\uffa0" +
    "\042\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0\050" +
    "\uffa0\052\uffa0\053\uffa0\054\uffa0\055\uffa0\056\uffa0\057\uffa0" +
    "\060\uffa0\062\uffa0\066\uffa0\070\uffa0\072\uffa0\073\uffa0\074" +
    "\uffa0\077\uffa0\001\002\000\044\041\151\042\142\043\146" +
    "\044\144\045\152\046\154\047\153\050\150\052\147\054" +
    "\156\055\160\056\145\057\157\060\141\062\155\074\220" +
    "\077\143\001\002\000\062\041\uff9c\042\uff9c\043\uff9c\044" +
    "\uff9c\045\uff9c\046\uff9c\047\uff9c\050\uff9c\052\uff9c\053\uff9c" +
    "\054\uff9c\055\uff9c\056\uff9c\057\uff9c\060\uff9c\062\uff9c\066" +
    "\uff9c\067\uff9c\070\uff9c\072\uff9c\073\uff9c\074\uff9c\075\uff9c" +
    "\077\uff9c\001\002\000\036\017\136\024\132\025\126\037" +
    "\122\051\133\056\130\061\123\065\117\071\135\100\120" +
    "\101\125\102\121\103\127\104\134\001\002\000\044\041" +
    "\151\042\142\043\146\044\144\045\152\046\154\047\153" +
    "\050\150\052\147\054\156\055\160\056\145\057\157\060" +
    "\141\062\155\074\223\077\143\001\002\000\062\041\uff9d" +
    "\042\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d\047\uff9d\050" +
    "\uff9d\052\uff9d\053\uff9d\054\uff9d\055\uff9d\056\uff9d\057\uff9d" +
    "\060\uff9d\062\uff9d\066\uff9d\067\uff9d\070\uff9d\072\uff9d\073" +
    "\uff9d\074\uff9d\075\uff9d\077\uff9d\001\002\000\056\041\uff79" +
    "\042\uff79\043\uff79\044\uff79\045\uff79\046\uff79\047\uff79\050" +
    "\uff79\052\uff79\053\uff79\054\uff79\055\uff79\056\uff79\057\uff79" +
    "\060\uff79\062\uff79\066\uff79\070\uff79\072\uff79\073\uff79\074" +
    "\uff79\077\uff79\001\002\000\006\066\226\073\206\001\002" +
    "\000\056\041\uff78\042\uff78\043\uff78\044\uff78\045\uff78\046" +
    "\uff78\047\uff78\050\uff78\052\uff78\053\uff78\054\uff78\055\uff78" +
    "\056\uff78\057\uff78\060\uff78\062\uff78\066\uff78\070\uff78\072" +
    "\uff78\073\uff78\074\uff78\077\uff78\001\002\000\036\017\136" +
    "\024\132\025\126\037\122\051\133\056\130\061\123\065" +
    "\117\071\135\100\120\101\125\102\121\103\127\104\134" +
    "\001\002\000\044\041\151\042\142\043\146\044\144\045" +
    "\152\046\154\047\153\050\150\052\147\054\156\055\160" +
    "\056\145\057\157\060\141\062\155\073\231\077\143\001" +
    "\002\000\036\017\136\024\132\025\126\037\122\051\133" +
    "\056\130\061\123\065\117\071\135\100\120\101\125\102" +
    "\121\103\127\104\134\001\002\000\044\041\151\042\142" +
    "\043\146\044\144\045\152\046\154\047\153\050\150\052" +
    "\147\054\156\055\160\056\145\057\157\060\141\062\155" +
    "\066\233\077\143\001\002\000\056\041\uff8a\042\uff8a\043" +
    "\uff8a\044\uff8a\045\uff8a\046\uff8a\047\uff8a\050\uff8a\052\uff8a" +
    "\053\uff8a\054\uff8a\055\uff8a\056\uff8a\057\uff8a\060\uff8a\062" +
    "\uff8a\066\uff8a\070\uff8a\072\uff8a\073\uff8a\074\uff8a\077\uff8a" +
    "\001\002\000\004\065\237\001\002\000\004\075\214\001" +
    "\002\000\060\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045\uff9a" +
    "\046\uff9a\047\uff9a\050\uff9a\052\uff9a\053\uff9a\054\uff9a\055" +
    "\uff9a\056\uff9a\057\uff9a\060\uff9a\062\uff9a\066\uff9a\070\uff9a" +
    "\072\uff9a\073\uff9a\074\uff9a\075\221\077\uff9a\001\002\000" +
    "\040\017\136\024\132\025\126\037\122\051\133\056\130" +
    "\061\123\065\117\066\240\071\135\100\120\101\125\102" +
    "\121\103\127\104\134\001\002\000\056\041\uff7a\042\uff7a" +
    "\043\uff7a\044\uff7a\045\uff7a\046\uff7a\047\uff7a\050\uff7a\052" +
    "\uff7a\053\uff7a\054\uff7a\055\uff7a\056\uff7a\057\uff7a\060\uff7a" +
    "\062\uff7a\066\uff7a\070\uff7a\072\uff7a\073\uff7a\074\uff7a\077" +
    "\uff7a\001\002\000\006\066\242\073\206\001\002\000\056" +
    "\041\uff7b\042\uff7b\043\uff7b\044\uff7b\045\uff7b\046\uff7b\047" +
    "\uff7b\050\uff7b\052\uff7b\053\uff7b\054\uff7b\055\uff7b\056\uff7b" +
    "\057\uff7b\060\uff7b\062\uff7b\066\uff7b\070\uff7b\072\uff7b\073" +
    "\uff7b\074\uff7b\077\uff7b\001\002\000\044\041\151\042\142" +
    "\043\146\044\144\045\152\046\154\047\153\050\150\052" +
    "\147\054\156\055\160\056\145\057\157\060\141\062\155" +
    "\066\244\077\143\001\002\000\056\041\uff7e\042\uff7e\043" +
    "\uff7e\044\uff7e\045\uff7e\046\uff7e\047\uff7e\050\uff7e\052\uff7e" +
    "\053\uff7e\054\uff7e\055\uff7e\056\uff7e\057\uff7e\060\uff7e\062" +
    "\uff7e\066\uff7e\070\uff7e\072\uff7e\073\uff7e\074\uff7e\077\uff7e" +
    "\001\002\000\012\067\uffc9\070\uffc9\075\250\103\uffc9\001" +
    "\002\000\004\074\247\001\002\000\012\067\uffc7\070\uffc7" +
    "\075\uffc7\103\uffc7\001\002\000\004\074\251\001\002\000" +
    "\012\067\uffc8\070\uffc8\075\uffc8\103\uffc8\001\002\000\022" +
    "\013\076\014\053\026\054\027\061\030\052\031\055\032" +
    "\060\066\254\001\002\000\006\066\255\073\103\001\002" +
    "\000\006\070\uffdc\071\uffdc\001\002\000\006\070\uffdd\071" +
    "\uffdd\001\002\000\022\013\076\014\053\026\054\027\061" +
    "\030\052\031\055\032\060\066\uffe9\001\002\000\004\066" +
    "\261\001\002\000\006\066\uffea\073\103\001\002\000\004" +
    "\071\262\001\002\000\050\014\053\016\266\017\265\020" +
    "\311\021\307\022\315\023\310\026\054\027\061\030\052" +
    "\031\055\032\060\033\317\035\263\036\314\040\274\071" +
    "\275\076\270\103\301\001\002\000\004\065\u0112\001\002" +
    "\000\004\103\115\001\002\000\010\067\uffab\070\uffab\077" +
    "\uffab\001\002\000\040\017\136\024\132\025\126\037\122" +
    "\051\133\056\130\061\123\065\117\070\uff9e\071\135\100" +
    "\120\101\125\102\121\103\127\104\134\001\002\000\052" +
    "\014\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023" +
    "\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe" +
    "\035\uffbe\036\uffbe\040\uffbe\071\uffbe\072\uffbe\076\uffbe\103" +
    "\uffbe\001\002\000\052\014\uffc3\016\uffc3\017\uffc3\020\uffc3" +
    "\021\uffc3\022\uffc3\023\uffc3\026\uffc3\027\uffc3\030\uffc3\031" +
    "\uffc3\032\uffc3\033\uffc3\035\uffc3\036\uffc3\040\uffc3\071\uffc3" +
    "\072\uffc3\076\uffc3\103\uffc3\001\002\000\052\014\uffc4\016" +
    "\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\026\uffc4" +
    "\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\035\uffc4\036" +
    "\uffc4\040\uffc4\071\uffc4\072\uffc4\076\uffc4\103\uffc4\001\002" +
    "\000\010\067\u0105\070\u010b\077\u0106\001\002\000\052\014" +
    "\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8" +
    "\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\035" +
    "\uffb8\036\uffb8\040\uffb8\071\uffb8\072\uffb8\076\uffb8\103\uffb8" +
    "\001\002\000\004\065\370\001\002\000\050\014\053\016" +
    "\266\017\265\020\311\021\307\022\315\023\310\026\054" +
    "\027\061\030\052\031\055\032\060\033\317\035\263\036" +
    "\314\040\274\071\275\076\270\103\301\001\002\000\052" +
    "\014\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023" +
    "\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc" +
    "\035\uffbc\036\uffbc\040\uffbc\071\uffbc\072\uffbc\076\uffbc\103" +
    "\uffbc\001\002\000\052\014\uffbf\016\uffbf\017\uffbf\020\uffbf" +
    "\021\uffbf\022\uffbf\023\uffbf\026\uffbf\027\uffbf\030\uffbf\031" +
    "\uffbf\032\uffbf\033\uffbf\035\uffbf\036\uffbf\040\uffbf\071\uffbf" +
    "\072\uffbf\076\uffbf\103\uffbf\001\002\000\052\014\uffbb\016" +
    "\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\026\uffbb" +
    "\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\035\uffbb\036" +
    "\uffbb\040\uffbb\071\uffbb\072\uffbb\076\uffbb\103\uffbb\001\002" +
    "\000\022\063\215\064\216\065\354\067\uffac\070\uffac\075" +
    "\214\077\uffac\103\355\001\002\000\052\014\uffb6\016\uffb6" +
    "\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\026\uffb6\027" +
    "\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\035\uffb6\036\uffb6" +
    "\040\uffb6\071\uffb6\072\uffb6\076\uffb6\103\uffb6\001\002\000" +
    "\052\014\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1" +
    "\023\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033" +
    "\uffc1\035\uffc1\036\uffc1\040\uffc1\071\uffc1\072\uffc1\076\uffc1" +
    "\103\uffc1\001\002\000\004\070\353\001\002\000\052\014" +
    "\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba" +
    "\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba\035" +
    "\uffba\036\uffba\040\uffba\071\uffba\072\uffba\076\uffba\103\uffba" +
    "\001\002\000\052\014\uffc0\016\uffc0\017\uffc0\020\uffc0\021" +
    "\uffc0\022\uffc0\023\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0" +
    "\032\uffc0\033\uffc0\035\uffc0\036\uffc0\040\uffc0\071\uffc0\072" +
    "\uffc0\076\uffc0\103\uffc0\001\002\000\004\065\350\001\002" +
    "\000\004\065\344\001\002\000\010\067\uffaa\070\uffaa\077" +
    "\uffaa\001\002\000\004\070\343\001\002\000\052\014\053" +
    "\016\266\017\265\020\311\021\307\022\315\023\310\026" +
    "\054\027\061\030\052\031\055\032\060\033\317\035\263" +
    "\036\314\040\274\071\275\072\342\076\270\103\301\001" +
    "\002\000\004\070\341\001\002\000\004\065\335\001\002" +
    "\000\052\014\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022" +
    "\uffbd\023\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd" +
    "\033\uffbd\035\uffbd\036\uffbd\040\uffbd\071\uffbd\072\uffbd\076" +
    "\uffbd\103\uffbd\001\002\000\004\065\321\001\002\000\052" +
    "\014\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023" +
    "\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9" +
    "\035\uffb9\036\uffb9\040\uffb9\071\uffb9\072\uffb9\076\uffb9\103" +
    "\uffb9\001\002\000\036\017\136\024\132\025\126\037\122" +
    "\051\133\056\130\061\123\065\117\071\135\100\120\101" +
    "\125\102\121\103\127\104\134\001\002\000\044\041\151" +
    "\042\142\043\146\044\144\045\152\046\154\047\153\050" +
    "\150\052\147\054\156\055\160\056\145\057\157\060\141" +
    "\062\155\066\323\077\143\001\002\000\004\071\324\001" +
    "\002\000\050\014\053\016\266\017\265\020\311\021\307" +
    "\022\315\023\310\026\054\027\061\030\052\031\055\032" +
    "\060\033\317\035\263\036\314\040\274\071\275\076\270" +
    "\103\301\001\002\000\052\014\053\016\266\017\265\020" +
    "\311\021\307\022\315\023\310\026\054\027\061\030\052" +
    "\031\055\032\060\033\317\035\263\036\314\040\274\071" +
    "\275\072\327\076\270\103\301\001\002\000\052\014\uffc5" +
    "\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\026" +
    "\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\035\uffc5" +
    "\036\uffc5\040\uffc5\071\uffc5\072\uffc5\076\uffc5\103\uffc5\001" +
    "\002\000\054\014\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4" +
    "\022\uffa4\023\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\032" +
    "\uffa4\033\uffa4\034\330\035\uffa4\036\uffa4\040\uffa4\071\uffa4" +
    "\072\uffa4\076\uffa4\103\uffa4\001\002\000\006\033\317\071" +
    "\331\001\002\000\050\014\053\016\266\017\265\020\311" +
    "\021\307\022\315\023\310\026\054\027\061\030\052\031" +
    "\055\032\060\033\317\035\263\036\314\040\274\071\275" +
    "\076\270\103\301\001\002\000\052\014\uffa2\016\uffa2\017" +
    "\uffa2\020\uffa2\021\uffa2\022\uffa2\023\uffa2\026\uffa2\027\uffa2" +
    "\030\uffa2\031\uffa2\032\uffa2\033\uffa2\035\uffa2\036\uffa2\040" +
    "\uffa2\071\uffa2\072\uffa2\076\uffa2\103\uffa2\001\002\000\052" +
    "\014\053\016\266\017\265\020\311\021\307\022\315\023" +
    "\310\026\054\027\061\030\052\031\055\032\060\033\317" +
    "\035\263\036\314\040\274\071\275\072\334\076\270\103" +
    "\301\001\002\000\052\014\uffa3\016\uffa3\017\uffa3\020\uffa3" +
    "\021\uffa3\022\uffa3\023\uffa3\026\uffa3\027\uffa3\030\uffa3\031" +
    "\uffa3\032\uffa3\033\uffa3\035\uffa3\036\uffa3\040\uffa3\071\uffa3" +
    "\072\uffa3\076\uffa3\103\uffa3\001\002\000\036\017\136\024" +
    "\132\025\126\037\122\051\133\056\130\061\123\065\117" +
    "\071\135\100\120\101\125\102\121\103\127\104\134\001" +
    "\002\000\044\041\151\042\142\043\146\044\144\045\152" +
    "\046\154\047\153\050\150\052\147\054\156\055\160\056" +
    "\145\057\157\060\141\062\155\066\337\077\143\001\002" +
    "\000\004\070\340\001\002\000\052\014\uffb1\016\uffb1\017" +
    "\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\026\uffb1\027\uffb1" +
    "\030\uffb1\031\uffb1\032\uffb1\033\uffb1\035\uffb1\036\uffb1\040" +
    "\uffb1\071\uffb1\072\uffb1\076\uffb1\103\uffb1\001\002\000\052" +
    "\014\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023" +
    "\uffa6\026\uffa6\027\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6" +
    "\035\uffa6\036\uffa6\040\uffa6\071\uffa6\072\uffa6\076\uffa6\103" +
    "\uffa6\001\002\000\044\004\uffeb\006\uffeb\007\uffeb\010\uffeb" +
    "\011\uffeb\012\uffeb\013\uffeb\014\uffeb\026\uffeb\027\uffeb\030" +
    "\uffeb\031\uffeb\032\uffeb\070\uffeb\071\uffeb\072\uffeb\103\uffeb" +
    "\001\002\000\052\014\uffc2\016\uffc2\017\uffc2\020\uffc2\021" +
    "\uffc2\022\uffc2\023\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2" +
    "\032\uffc2\033\uffc2\035\uffc2\036\uffc2\040\uffc2\071\uffc2\072" +
    "\uffc2\076\uffc2\103\uffc2\001\002\000\036\017\136\024\132" +
    "\025\126\037\122\051\133\056\130\061\123\065\117\071" +
    "\135\100\120\101\125\102\121\103\127\104\134\001\002" +
    "\000\044\041\151\042\142\043\146\044\144\045\152\046" +
    "\154\047\153\050\150\052\147\054\156\055\160\056\145" +
    "\057\157\060\141\062\155\066\346\077\143\001\002\000" +
    "\004\070\347\001\002\000\052\014\uffb0\016\uffb0\017\uffb0" +
    "\020\uffb0\021\uffb0\022\uffb0\023\uffb0\026\uffb0\027\uffb0\030" +
    "\uffb0\031\uffb0\032\uffb0\033\uffb0\035\uffb0\036\uffb0\040\uffb0" +
    "\071\uffb0\072\uffb0\076\uffb0\103\uffb0\001\002\000\004\066" +
    "\351\001\002\000\004\070\352\001\002\000\052\014\uffaf" +
    "\016\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\026" +
    "\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\035\uffaf" +
    "\036\uffaf\040\uffaf\071\uffaf\072\uffaf\076\uffaf\103\uffaf\001" +
    "\002\000\052\014\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7" +
    "\022\uffb7\023\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032" +
    "\uffb7\033\uffb7\035\uffb7\036\uffb7\040\uffb7\071\uffb7\072\uffb7" +
    "\076\uffb7\103\uffb7\001\002\000\040\017\136\024\132\025" +
    "\126\037\122\051\133\056\130\061\123\065\117\066\363" +
    "\071\135\100\120\101\125\102\121\103\127\104\134\001" +
    "\002\000\006\067\357\070\360\001\002\000\012\067\uffa7" +
    "\070\uffa7\075\221\077\uffa7\001\002\000\036\017\136\024" +
    "\132\025\126\037\122\051\133\056\130\061\123\065\117" +
    "\071\135\100\120\101\125\102\121\103\127\104\134\001" +
    "\002\000\100\014\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd" +
    "\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030" +
    "\uffcd\031\uffcd\032\uffcd\033\uffcd\035\uffcd\036\uffcd\037\uffcd" +
    "\040\uffcd\051\uffcd\056\uffcd\061\uffcd\065\uffcd\071\uffcd\072" +
    "\uffcd\076\uffcd\100\uffcd\101\uffcd\102\uffcd\103\uffcd\104\uffcd" +
    "\001\002\000\044\041\151\042\142\043\146\044\144\045" +
    "\152\046\154\047\153\050\150\052\147\054\156\055\160" +
    "\056\145\057\157\060\141\062\155\070\362\077\143\001" +
    "\002\000\100\014\uffce\016\uffce\017\uffce\020\uffce\021\uffce" +
    "\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030" +
    "\uffce\031\uffce\032\uffce\033\uffce\035\uffce\036\uffce\037\uffce" +
    "\040\uffce\051\uffce\056\uffce\061\uffce\065\uffce\071\uffce\072" +
    "\uffce\076\uffce\100\uffce\101\uffce\102\uffce\103\uffce\104\uffce" +
    "\001\002\000\010\067\uffa9\070\uffa9\077\uffa9\001\002\000" +
    "\006\066\365\073\206\001\002\000\010\067\uffa8\070\uffa8" +
    "\077\uffa8\001\002\000\052\014\053\016\266\017\265\020" +
    "\311\021\307\022\315\023\310\026\054\027\061\030\052" +
    "\031\055\032\060\033\317\035\263\036\314\040\274\071" +
    "\275\072\367\076\270\103\301\001\002\000\052\014\uffc6" +
    "\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\026" +
    "\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\035\uffc6" +
    "\036\uffc6\040\uffc6\071\uffc6\072\uffc6\076\uffc6\103\uffc6\001" +
    "\002\000\024\014\053\017\265\020\311\026\054\027\061" +
    "\030\052\031\055\032\060\103\371\001\002\000\014\065" +
    "\354\067\uffac\075\214\077\uffac\103\355\001\002\000\036" +
    "\017\uffb2\024\uffb2\025\uffb2\037\uffb2\051\uffb2\056\uffb2\061" +
    "\uffb2\065\uffb2\071\uffb2\100\uffb2\101\uffb2\102\uffb2\103\uffb2" +
    "\104\uffb2\001\002\000\006\067\u0105\077\u0106\001\002\000" +
    "\036\017\uffb3\024\uffb3\025\uffb3\037\uffb3\051\uffb3\056\uffb3" +
    "\061\uffb3\065\uffb3\071\uffb3\100\uffb3\101\uffb3\102\uffb3\103" +
    "\uffb3\104\uffb3\001\002\000\036\017\136\024\132\025\126" +
    "\037\122\051\133\056\130\061\123\065\117\071\135\100" +
    "\120\101\125\102\121\103\127\104\134\001\002\000\044" +
    "\041\151\042\142\043\146\044\144\045\152\046\154\047" +
    "\153\050\150\052\147\054\156\055\160\056\145\057\157" +
    "\060\141\062\155\070\377\077\143\001\002\000\036\017" +
    "\136\024\132\025\126\037\122\051\133\056\130\061\123" +
    "\065\117\071\135\100\120\101\125\102\121\103\127\104" +
    "\134\001\002\000\044\041\151\042\142\043\146\044\144" +
    "\045\152\046\154\047\153\050\150\052\147\054\156\055" +
    "\160\056\145\057\157\060\141\062\155\066\u0101\077\143" +
    "\001\002\000\004\071\u0102\001\002\000\050\014\053\016" +
    "\266\017\265\020\311\021\307\022\315\023\310\026\054" +
    "\027\061\030\052\031\055\032\060\033\317\035\263\036" +
    "\314\040\274\071\275\076\270\103\301\001\002\000\052" +
    "\014\053\016\266\017\265\020\311\021\307\022\315\023" +
    "\310\026\054\027\061\030\052\031\055\032\060\033\317" +
    "\035\263\036\314\040\274\071\275\072\u0104\076\270\103" +
    "\301\001\002\000\052\014\uffb4\016\uffb4\017\uffb4\020\uffb4" +
    "\021\uffb4\022\uffb4\023\uffb4\026\uffb4\027\uffb4\030\uffb4\031" +
    "\uffb4\032\uffb4\033\uffb4\035\uffb4\036\uffb4\040\uffb4\071\uffb4" +
    "\072\uffb4\076\uffb4\103\uffb4\001\002\000\036\017\136\024" +
    "\132\025\126\037\122\051\133\056\130\061\123\065\117" +
    "\071\135\100\120\101\125\102\121\103\127\104\134\001" +
    "\002\000\010\017\265\020\311\103\u0107\001\002\000\014" +
    "\065\354\067\uffac\070\uffac\075\214\077\uffac\001\002\000" +
    "\010\067\uffad\070\uffad\077\uffad\001\002\000\044\041\151" +
    "\042\142\043\146\044\144\045\152\046\154\047\153\050" +
    "\150\052\147\054\156\055\160\056\145\057\157\060\141" +
    "\062\155\070\u010a\077\143\001\002\000\100\014\uffae\016" +
    "\uffae\017\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024\uffae" +
    "\025\uffae\026\uffae\027\uffae\030\uffae\031\uffae\032\uffae\033" +
    "\uffae\035\uffae\036\uffae\037\uffae\040\uffae\051\uffae\056\uffae" +
    "\061\uffae\065\uffae\071\uffae\072\uffae\076\uffae\100\uffae\101" +
    "\uffae\102\uffae\103\uffae\104\uffae\001\002\000\052\014\uffb5" +
    "\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\026" +
    "\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\035\uffb5" +
    "\036\uffb5\040\uffb5\071\uffb5\072\uffb5\076\uffb5\103\uffb5\001" +
    "\002\000\044\041\151\042\142\043\146\044\144\045\152" +
    "\046\154\047\153\050\150\052\147\054\156\055\160\056" +
    "\145\057\157\060\141\062\155\070\uff9f\077\143\001\002" +
    "\000\010\067\u010e\070\u010f\103\115\001\002\000\036\017" +
    "\136\024\132\025\126\037\122\051\133\056\130\061\123" +
    "\065\117\071\135\100\120\101\125\102\121\103\127\104" +
    "\134\001\002\000\100\014\uffcf\016\uffcf\017\uffcf\020\uffcf" +
    "\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027" +
    "\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\035\uffcf\036\uffcf" +
    "\037\uffcf\040\uffcf\051\uffcf\056\uffcf\061\uffcf\065\uffcf\071" +
    "\uffcf\072\uffcf\076\uffcf\100\uffcf\101\uffcf\102\uffcf\103\uffcf" +
    "\104\uffcf\001\002\000\044\041\151\042\142\043\146\044" +
    "\144\045\152\046\154\047\153\050\150\052\147\054\156" +
    "\055\160\056\145\057\157\060\141\062\155\070\u0111\077" +
    "\143\001\002\000\100\014\uffd0\016\uffd0\017\uffd0\020\uffd0" +
    "\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027" +
    "\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\035\uffd0\036\uffd0" +
    "\037\uffd0\040\uffd0\051\uffd0\056\uffd0\061\uffd0\065\uffd0\071" +
    "\uffd0\072\uffd0\076\uffd0\100\uffd0\101\uffd0\102\uffd0\103\uffd0" +
    "\104\uffd0\001\002\000\036\017\136\024\132\025\126\037" +
    "\122\051\133\056\130\061\123\065\117\071\135\100\120" +
    "\101\125\102\121\103\127\104\134\001\002\000\044\041" +
    "\151\042\142\043\146\044\144\045\152\046\154\047\153" +
    "\050\150\052\147\054\156\055\160\056\145\057\157\060" +
    "\141\062\155\066\u0114\077\143\001\002\000\004\071\u0115" +
    "\001\002\000\050\014\053\016\266\017\265\020\311\021" +
    "\307\022\315\023\310\026\054\027\061\030\052\031\055" +
    "\032\060\033\317\035\263\036\314\040\274\071\275\076" +
    "\270\103\301\001\002\000\052\014\053\016\266\017\265" +
    "\020\311\021\307\022\315\023\310\026\054\027\061\030" +
    "\052\031\055\032\060\033\317\035\263\036\314\040\274" +
    "\071\275\072\u0117\076\270\103\301\001\002\000\052\014" +
    "\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5" +
    "\026\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5\035" +
    "\uffa5\036\uffa5\040\uffa5\071\uffa5\072\uffa5\076\uffa5\103\uffa5" +
    "\001\002\000\050\014\053\016\266\017\265\020\311\021" +
    "\307\022\315\023\310\026\054\027\061\030\052\031\055" +
    "\032\060\033\317\035\263\036\314\040\274\071\275\076" +
    "\270\103\301\001\002\000\044\004\uffe1\006\uffe1\007\uffe1" +
    "\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\026\uffe1\027" +
    "\uffe1\030\uffe1\031\uffe1\032\uffe1\070\uffe1\071\uffe1\072\uffe1" +
    "\103\uffe1\001\002\000\052\014\053\016\266\017\265\020" +
    "\311\021\307\022\315\023\310\026\054\027\061\030\052" +
    "\031\055\032\060\033\317\035\263\036\314\040\274\071" +
    "\275\072\u011b\076\270\103\301\001\002\000\044\004\uffe2" +
    "\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014" +
    "\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\070\uffe2" +
    "\071\uffe2\072\uffe2\103\uffe2\001\002\000\044\004\uffd7\006" +
    "\026\007\024\010\017\011\020\012\027\013\016\014\uffd7" +
    "\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\070\uffe0\071" +
    "\uffe0\072\u011d\103\uffd7\001\002\000\046\002\ufff2\004\ufff2" +
    "\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014" +
    "\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\070\ufff2" +
    "\071\ufff2\072\ufff2\103\ufff2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011b\000\014\002\007\033\004\035\005\037\006\043" +
    "\003\001\001\000\012\031\021\032\024\042\022\044\020" +
    "\001\001\000\004\035\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\032\030\042\022\044\020\001" +
    "\001\000\004\042\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\032\045\040\043\041\040\042\022\044\041\047" +
    "\044\050\u011b\051\042\054\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\032\045\040\043\041\040\042" +
    "\022\044\041\047\044\050\046\051\042\054\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\032\045\040\043\041\040\042" +
    "\022\044\041\047\047\051\042\054\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\024\061\025\063\046\064\056\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\244\001\001\000\004\024\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\077\045\100\053\076\001\001" +
    "\000\004\007\111\001\001\000\002\001\001\000\004\055" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\077\053\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\055\112\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\244\001\001\000\012" +
    "\015\137\016\130\036\123\057\136\001\001\000\010\015" +
    "\242\016\130\036\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\234\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\212\001\001\000\010\015\210\016\130\036\123\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\015\207" +
    "\016\130\036\123\001\001\000\002\001\001\000\012\015" +
    "\203\016\130\034\202\036\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\015\201\016" +
    "\130\036\123\001\001\000\010\015\200\016\130\036\123" +
    "\001\001\000\010\015\177\016\130\036\123\001\001\000" +
    "\010\015\176\016\130\036\123\001\001\000\010\015\175" +
    "\016\130\036\123\001\001\000\010\015\174\016\130\036" +
    "\123\001\001\000\010\015\173\016\130\036\123\001\001" +
    "\000\010\015\172\016\130\036\123\001\001\000\010\015" +
    "\171\016\130\036\123\001\001\000\010\015\170\016\130" +
    "\036\123\001\001\000\010\015\167\016\130\036\123\001" +
    "\001\000\010\015\166\016\130\036\123\001\001\000\010" +
    "\015\165\016\130\036\123\001\001\000\010\015\162\016" +
    "\130\036\123\001\001\000\010\015\161\016\130\036\123" +
    "\001\001\000\010\015\160\016\130\036\123\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\015\164\016\130\036\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\015\206\016\130\036\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\015\203\016\130" +
    "\034\224\036\123\001\001\000\002\001\001\000\010\015" +
    "\216\016\130\036\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\015" +
    "\221\016\130\036\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\015\227\016\130\036\123\001\001\000\002" +
    "\001\001\000\010\015\231\016\130\036\123\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\235\001\001\000\002\001\001\000\012\015\203\016" +
    "\130\034\240\036\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\077\045" +
    "\252\053\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\007\077\045\257\052\256\053" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\003\277\004\312\005\270\006\315\007" +
    "\263\010\304\011\266\012\275\013\317\014\272\016\303" +
    "\017\302\020\276\021\305\022\301\023\311\060\271\001" +
    "\001\000\002\001\001\000\006\024\061\025\u010c\001\001" +
    "\000\002\001\001\000\010\015\u010b\016\130\036\123\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\003\277\004\365\005\270\006\315\007\263\010\304" +
    "\011\266\012\275\013\317\014\272\016\303\017\302\020" +
    "\276\021\305\022\301\023\311\060\271\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\355\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\003\277\005\325\006\315\007\263\010\304\011" +
    "\266\012\275\013\317\014\272\016\303\017\302\020\276" +
    "\021\305\022\301\023\311\060\271\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\015\321\016\130\036\123\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\003\277" +
    "\004\324\005\270\006\315\007\263\010\304\011\266\012" +
    "\275\013\317\014\272\016\303\017\302\020\276\021\305" +
    "\022\301\023\311\060\271\001\001\000\042\003\277\005" +
    "\325\006\315\007\263\010\304\011\266\012\275\013\317" +
    "\014\272\016\303\017\302\020\276\021\305\022\301\023" +
    "\311\060\271\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\331\001\001\000\044\003\277\004\332\005" +
    "\270\006\315\007\263\010\304\011\266\012\275\013\317" +
    "\014\272\016\303\017\302\020\276\021\305\022\301\023" +
    "\311\060\271\001\001\000\002\001\001\000\042\003\277" +
    "\005\325\006\315\007\263\010\304\011\266\012\275\013" +
    "\317\014\272\016\303\017\302\020\276\021\305\022\301" +
    "\023\311\060\271\001\001\000\002\001\001\000\010\015" +
    "\335\016\130\036\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\015\344\016\130\036\123" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\015\203\016\130\034\363\036" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\015\360\016\130\036\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\003\277\005\325\006" +
    "\315\007\263\010\304\011\266\012\275\013\317\014\272" +
    "\016\303\017\302\020\276\021\305\022\301\023\311\060" +
    "\271\001\001\000\002\001\001\000\014\006\373\007\263" +
    "\010\371\030\374\060\372\001\001\000\004\026\355\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\015\375\016\130\036\123\001\001\000\002\001" +
    "\001\000\010\015\377\016\130\036\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\003\277\004\u0102\005" +
    "\270\006\315\007\263\010\304\011\266\012\275\013\317" +
    "\014\272\016\303\017\302\020\276\021\305\022\301\023" +
    "\311\060\271\001\001\000\042\003\277\005\325\006\315" +
    "\007\263\010\304\011\266\012\275\013\317\014\272\016" +
    "\303\017\302\020\276\021\305\022\301\023\311\060\271" +
    "\001\001\000\002\001\001\000\010\015\u0108\016\130\036" +
    "\123\001\001\000\004\060\u0107\001\001\000\004\026\355" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\113" +
    "\001\001\000\010\015\u010f\016\130\036\123\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\015\u0112\016\130\036\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\003\277\004\u0115\005\270\006\315" +
    "\007\263\010\304\011\266\012\275\013\317\014\272\016" +
    "\303\017\302\020\276\021\305\022\301\023\311\060\271" +
    "\001\001\000\042\003\277\005\325\006\315\007\263\010" +
    "\304\011\266\012\275\013\317\014\272\016\303\017\302" +
    "\020\276\021\305\022\301\023\311\060\271\001\001\000" +
    "\002\001\001\000\044\003\277\004\u0119\005\270\006\315" +
    "\007\263\010\304\011\266\012\275\013\317\014\272\016" +
    "\303\017\302\020\276\021\305\022\301\023\311\060\271" +
    "\001\001\000\002\001\001\000\042\003\277\005\325\006" +
    "\315\007\263\010\304\011\266\012\275\013\317\014\272" +
    "\016\303\017\302\020\276\021\305\022\301\023\311\060" +
    "\271\001\001\000\002\001\001\000\022\032\045\040\043" +
    "\041\040\042\022\044\041\047\047\051\042\054\037\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public static AST arbol;

    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
        System.out.println("1) Error en la Línea "+  (s.right)+ " Columna "+s.left +". Identificador "+
        s.value  +" no reconocido." );
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error en la Línea "  +(s.right)+ " Columna "+s.left+". +Identificador " +
        s.value + " no reconocido.");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {




  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= ini 
            {
              Object RESULT =null;
		System.out.println("TERMINO GRAMATICA");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ini ::= IMPORT_NULL LISTACLASES 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> e = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        parser.arbol = new AST(e);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LISTACLASES ::= LISTACLASES CLASE 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Clase b = (Clase)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = a;
        RESULT.addLast(b);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTACLASES",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LISTACLASES ::= CLASE 
            {
              LinkedList<NodoAST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Clase e = (Clase)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new LinkedList();
        RESULT.addLast(e);        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTACLASES",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ELEMENTOS_CLASE ::= ELEMENTOS_CLASE class_body_dec 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = a;
        RESULT.addLast(b);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_CLASE",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ELEMENTOS_CLASE ::= class_body_dec 
            {
              LinkedList<NodoAST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST e = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new LinkedList();
        RESULT.addLast(e);        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_CLASE",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // class_body_dec ::= CLASE 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Clase a = (Clase)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = a;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("class_body_dec",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // class_body_dec ::= constructor_declaration 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Constructor a = (Constructor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
        RESULT = a;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("class_body_dec",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // class_body_dec ::= method_declaration 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Funcion a = (Funcion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = a;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("class_body_dec",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // class_body_dec ::= ATRIBUTOS 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = a;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("class_body_dec",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ATRIBUTOS ::= MODIFICADORES_NULL TIPO DECLARACION_ATRIBUTO pcoma 
            {
              NodoAST RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Declaracion a = (Declaracion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        a.setTipo(t);
        RESULT = a;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLARACION_ATRIBUTO ::= LISTA_VAR igual VARIABLE_INICIALIZAR 
            {
              Declaracion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Var> a = (LinkedList<Var>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Declaracion(a,b);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_ATRIBUTO",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARACION_ATRIBUTO ::= LISTA_VAR 
            {
              Declaracion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Var> a = (LinkedList<Var>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Declaracion(a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_ATRIBUTO",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VARIABLE_INICIALIZAR ::= EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLE_INICIALIZAR",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CLASE ::= MODIFICADORES_NULL Tclass ID llavea ELEMENTOS_CLASE llavec 
            {
              Clase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Modificador> a = (LinkedList<Modificador>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> c = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        LinkedList<Instruccion> declaraciones = new LinkedList();
        LinkedList<Funcion> funciones =new LinkedList();
        LinkedList<Constructor> constructores = new LinkedList();
        LinkedList<Clase> jerarqua = new LinkedList();
        for(NodoAST nodo : c)
        {
            if(nodo instanceof Funcion)
            {
                funciones.addLast((Funcion)nodo);
            }
            else if(nodo instanceof Declaracion)
            {
                declaraciones.addLast((Declaracion)nodo);
            }
            else if(nodo instanceof Asignacion)
            {
                declaraciones.addLast((Asignacion)nodo);
            }
            else if(nodo instanceof Constructor)
            {
                constructores.addLast((Constructor)nodo);
            }
            else if(nodo instanceof Clase)
            {
                jerarqua.addLast((Clase)nodo);
            }
        }
        RESULT = new Clase(Rol.CLASE,a,declaraciones,funciones,constructores,b.toString(),jerarqua);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASE",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CLASE ::= MODIFICADORES_NULL Tclass ID Textends ID llavea ELEMENTOS_CLASE llavec 
            {
              Clase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		LinkedList<Modificador> a = (LinkedList<Modificador>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int extleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int extright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String ext = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> c = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        LinkedList<Instruccion> declaraciones = new LinkedList();
        LinkedList<Funcion> funciones =new LinkedList();
        LinkedList<Constructor> constructores = new LinkedList();
        LinkedList<Clase> jerarqua = new LinkedList();
        for(NodoAST nodo : c)
        {
            if(nodo instanceof Funcion)
            {
                funciones.addLast((Funcion)nodo);
            }
            else if(nodo instanceof Declaracion)
            {
                declaraciones.addLast((Declaracion)nodo);
            }
            else if(nodo instanceof Asignacion)
            {
                declaraciones.addLast((Asignacion)nodo);
            }
            else if(nodo instanceof Constructor)
            {
                constructores.addLast((Constructor)nodo);
            }
            else if(nodo instanceof Clase)
            {
                jerarqua.addLast((Clase)nodo);
            }
        }
        RESULT = new Clase(a,declaraciones,funciones,constructores,b.toString(),jerarqua,ext);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASE",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IMPORT_NULL ::= LISTAIMPORT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORT_NULL",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IMPORT_NULL ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORT_NULL",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LISTAIMPORT ::= LISTAIMPORT IMPORT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAIMPORT",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LISTAIMPORT ::= IMPORT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAIMPORT",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // IMPORT ::= Timport CAD pcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORT",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // constructor_declaration ::= MODIFICADORES_NULL ID para PARAMETERS_NULL parc llavea BLOQUE llavec 
            {
              Constructor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		LinkedList<Modificador> a = (LinkedList<Modificador>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Simbolo> c = (LinkedList<Simbolo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> d = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new Constructor(Rol.CONSTRUCTOR,a,c,d,b.toString());
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("constructor_declaration",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PARAMETERS_NULL ::= formal_parameters 
            {
              LinkedList<Simbolo> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Simbolo> b = (LinkedList<Simbolo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
       RESULT = b;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETERS_NULL",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PARAMETERS_NULL ::= 
            {
              LinkedList<Simbolo> RESULT =null;
		
       RESULT = new LinkedList();
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETERS_NULL",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // formal_parameters ::= formal_parameters coma formal_parameter 
            {
              LinkedList<Simbolo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Simbolo> a = (LinkedList<Simbolo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Simbolo b = (Simbolo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
        RESULT = a;
        RESULT.addLast(b);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("formal_parameters",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // formal_parameters ::= formal_parameter 
            {
              LinkedList<Simbolo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Simbolo a = (Simbolo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new LinkedList();
        RESULT.addLast(a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("formal_parameters",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // formal_parameter ::= Tfinal TIPO variable_declarator_id 
            {
              Simbolo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Simbolo b = (Simbolo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Simbolo(b.getIdentificador(),b.getRol(),a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("formal_parameter",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // formal_parameter ::= TIPO variable_declarator_id 
            {
              Simbolo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Simbolo b = (Simbolo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Simbolo(b.getIdentificador(),b.getRol(),a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("formal_parameter",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // variable_declarator_id ::= ID cora corc 
            {
              Simbolo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
        RESULT = new Simbolo(a.toString(),Rol.ARREGLO);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variable_declarator_id",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // variable_declarator_id ::= ID 
            {
              Simbolo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Simbolo(a.toString(),Rol.VARIABLE);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variable_declarator_id",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // method_declaration ::= method_header llavea BLOQUE llavec 
            {
              Funcion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Funcion a = (Funcion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = a;
        RESULT.setSentencias(b);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("method_declaration",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // method_declaration ::= method_header pcoma 
            {
              Funcion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Funcion a = (Funcion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = a;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("method_declaration",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // method_header ::= 
            {
              Funcion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("method_header",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // method_header ::= MODIFICADORES_NULL TIPO method_declarator ID para formal_parameters parc 
            {
              Funcion RESULT =null;
		int modleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int modright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		LinkedList<Modificador> mod = (LinkedList<Modificador>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Tipo tip = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Integer arr = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Simbolo> par = (LinkedList<Simbolo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new Funcion(id,Rol.FUNCION,tip,mod,par,arr);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("method_header",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // method_header ::= MODIFICADORES_NULL TIPO method_declarator ID para parc 
            {
              Funcion RESULT =null;
		int modleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int modright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Modificador> mod = (LinkedList<Modificador>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Tipo tip = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Integer arr = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
        RESULT = new Funcion(id,Rol.FUNCION,tip,mod,arr);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("method_header",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // method_header ::= MODIFICADORES_NULL TIPO ID para formal_parameters parc 
            {
              Funcion RESULT =null;
		int modleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int modright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Modificador> mod = (LinkedList<Modificador>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Tipo tip = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Simbolo> par = (LinkedList<Simbolo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new Funcion(id,Rol.FUNCION,tip,mod,par,0);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("method_header",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // method_header ::= MODIFICADORES_NULL TIPO ID para parc 
            {
              Funcion RESULT =null;
		int modleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int modright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Modificador> mod = (LinkedList<Modificador>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Tipo tip = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
        Rol rol = id.equalsIgnoreCase("main") ? Rol.MAIN : Rol.FUNCION;
        RESULT = new Funcion(id,rol,tip,mod,0);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("method_header",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // method_declarator ::= method_declarator cora corc 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
       RESULT = a + 1;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("method_declarator",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // method_declarator ::= cora corc 
            {
              Integer RESULT =null;
		
       RESULT = 1;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("method_declarator",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // MODIFICADORES_NULL ::= method_modifier method_modifier 
            {
              LinkedList<Modificador> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Modificador a = (Modificador)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Modificador b = (Modificador)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new LinkedList();
        RESULT.addLast(a);
        RESULT.addLast(b);

    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MODIFICADORES_NULL",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // MODIFICADORES_NULL ::= method_modifier 
            {
              LinkedList<Modificador> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Modificador a = (Modificador)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new LinkedList();
        RESULT.addLast(a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MODIFICADORES_NULL",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // MODIFICADORES_NULL ::= 
            {
              LinkedList<Modificador> RESULT =null;
		
       RESULT = new LinkedList();
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MODIFICADORES_NULL",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // method_modifier ::= Tpublic 
            {
              Modificador RESULT =null;
		 RESULT = new Modificador(TipoMod.PUBLIC); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("method_modifier",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // method_modifier ::= Tprotected 
            {
              Modificador RESULT =null;
		 RESULT = new Modificador(TipoMod.PROTECTED); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("method_modifier",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // method_modifier ::= Tprivate 
            {
              Modificador RESULT =null;
		 RESULT = new Modificador(TipoMod.PRIVATE); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("method_modifier",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // method_modifier ::= Tabstract 
            {
              Modificador RESULT =null;
		 RESULT = new Modificador(TipoMod.ABSTRACT); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("method_modifier",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // method_modifier ::= Tstatic 
            {
              Modificador RESULT =null;
		 RESULT = new Modificador(TipoMod.STATIC); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("method_modifier",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // method_modifier ::= Tfinal 
            {
              Modificador RESULT =null;
		 RESULT = new Modificador(TipoMod.FINAL); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("method_modifier",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DEC ::= TIPO LISTA_VAR igual EXPRESION pcoma 
            {
              Instruccion RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Tipo ti = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Var> i = (LinkedList<Var>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int resleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion res = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 
        RESULT = new Declaracion(ti, i,res);        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DEC ::= TIPO LISTA_VAR pcoma 
            {
              Instruccion RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Tipo ti = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Var> i = (LinkedList<Var>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 
        RESULT = new Declaracion(ti, i);        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DEC ::= ID ID igual EXPRESION pcoma 
            {
              Instruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int iileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String ii = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int resleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion res = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new Declaracion(new Tipo(i),res, ii);   
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DEC ::= ID ID pcoma 
            {
              Instruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int iileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String ii = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new Declaracion(new Tipo(i),ii); 
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LISTA_VAR ::= LISTA_VAR VAR 
            {
              LinkedList<Var> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Var> a = (LinkedList<Var>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Var b = (Var)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
        RESULT = a;
        RESULT.addLast(b);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_VAR",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LISTA_VAR ::= VAR 
            {
              LinkedList<Var> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Var a = (Var)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new LinkedList();
        RESULT.addLast(a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_VAR",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // VAR ::= ID 
            {
              Var RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Var(id);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VAR",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // VAR ::= ID LISTA_CORCHETES 
            {
              Var RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Var(id,(int)l);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VAR",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LISTA_CORCHETES ::= LISTA_CORCHETES cora corc 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
        int r = (int)l+1;
        RESULT = r;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_CORCHETES",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LISTA_CORCHETES ::= cora corc 
            {
              Object RESULT =null;
		
        int r = 1;
        RESULT = r;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_CORCHETES",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // INICIAR ::= llavea BLOQUE llavec 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> e = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		        
        RESULT = new Bloque(e);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIAR",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // BLOQUE ::= BLOQUE L 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = a;
        RESULT.addLast(b);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // BLOQUE ::= L 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new LinkedList();
        RESULT.addLast(a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // L ::= fantasma 
            {
              NodoAST RESULT =null;
		
        RESULT = new fantasma();
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // L ::= SENTENCIA_RETURN pcoma 
            {
              NodoAST RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion ins = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
       RESULT = ins;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // L ::= SENTENCIA_WHILE 
            {
              NodoAST RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = ins;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // L ::= SENTENCIA_FOR 
            {
              NodoAST RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = ins;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // L ::= SENTENCIA_BREAK 
            {
              NodoAST RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = ins;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // L ::= SENTENCIA_IF 
            {
              NodoAST RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = ins;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // L ::= DEC 
            {
              NodoAST RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = ins;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // L ::= PRINTTABLA 
            {
              NodoAST RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
       RESULT = ins;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // L ::= INICIAR 
            {
              NodoAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = e;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // L ::= ASIGNACION 
            {
              NodoAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = e;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // L ::= PRINT 
            {
              NodoAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = e;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // L ::= PRINTLN 
            {
              NodoAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = e;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // L ::= POSTFIJO pcoma 
            {
              NodoAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = e;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // L ::= SENTENCIA_LLAMADA 
            {
              NodoAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT =  e;        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SENTENCIA_LLAMADA ::= LISTAASIGNACION pcoma 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = (Expresion) a;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_LLAMADA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SENTENCIA_FOR ::= Tfor para FOR_INI EXPRESION pcoma EXPRESION parc llavea BLOQUE llavec 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> d = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new For(d, b,a,c);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // FOR_INI ::= DEC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = a;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR_INI",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // FOR_INI ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = a;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR_INI",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // PRINT ::= print para EXPRESION parc pcoma 
            {
              Instruccion RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion res = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
        RESULT = new Print(res);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PRINT",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // PRINTLN ::= println para EXPRESION parc pcoma 
            {
              Instruccion RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion res = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
        RESULT = new Println(res);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PRINTLN",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // PRINTTABLA ::= printtabla para parc pcoma 
            {
              Instruccion RESULT =null;
		
        RESULT = new PrintTabla();
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PRINTTABLA",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ASIGNACION ::= LISTAASIGNACION igual EXPRESION pcoma 
            {
              Instruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int resleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion res = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		          
        RESULT = new Asignacion(i,res);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LISTAASIGNACION ::= LISTAASIGNACION Tpunto LISTAASIGNACION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		      
        RESULT = new AccesoAsig(a,b);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAASIGNACION",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // LISTAASIGNACION ::= ID 
            {
              Expresion RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT =  new Identificador(valor.toString(),true);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAASIGNACION",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LISTAASIGNACION ::= Tthis 
            {
              Expresion RESULT =null;
		
        RESULT =  new Identificador("this",true);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAASIGNACION",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // LISTAASIGNACION ::= Tsuper 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAASIGNACION",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // LISTAASIGNACION ::= ID para parc 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
        RESULT = new Llama(a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAASIGNACION",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LISTAASIGNACION ::= ID para B parc 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new Llama(a,b);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAASIGNACION",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // LISTAASIGNACION ::= ID DIMENSION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        //dimension lista de expresiones
        RESULT = new Identificador(a,b,true);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAASIGNACION",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SENTENCIA_BREAK ::= Tbreak pcoma 
            {
              Instruccion RESULT =null;
		
        RESULT = new Break();
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BREAK",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SENTENCIA_WHILE ::= Twhile para EXPRESION parc llavea BLOQUE llavec 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new While(b,a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SENTENCIA_IF ::= Tif para EXPRESION parc llavea BLOQUE llavec 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new If(b,a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SENTENCIA_IF ::= Tif para EXPRESION parc llavea BLOQUE llavec Telse llavea BLOQUE llavec 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> c = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		

        RESULT = new If(b,a,c);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SENTENCIA_IF ::= Tif para EXPRESION parc llavea BLOQUE llavec Telse SENTENCIA_IF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new If(b,a,c);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // POSTFIJO ::= ID incremento 
            {
              Expresion RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new OperadorPost(new Identificador(valor.toString(),false),true);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("POSTFIJO",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // POSTFIJO ::= ID decremento 
            {
              Expresion RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new OperadorPost(new Identificador(valor.toString(),false),false);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("POSTFIJO",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SENTENCIA_RETURN ::= Treturn EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Return(a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETURN",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SENTENCIA_RETURN ::= Treturn 
            {
              Expresion RESULT =null;
		
        RESULT = new Return();
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETURN",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // DIMENSION ::= DIMENSION cora EXPRESION corc 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = a;
        RESULT.addLast(b);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIMENSION",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // DIMENSION ::= cora EXPRESION corc 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new LinkedList();
        RESULT.addLast(a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIMENSION",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // INI_ARRAY ::= llavea B llavec 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new IniciarArreglo(a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INI_ARRAY",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // INI_ARRAY ::= Tnew TIPO DIMENSION 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int resleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int resright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Expresion> res = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new generarArrreglo(res,t);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INI_ARRAY",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // B ::= B coma EXPRESION 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = a;
        RESULT.addLast(b);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("B",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // B ::= EXPRESION 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new LinkedList();
        RESULT.addLast(a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("B",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // TIPO ::= tint 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(Tipos.INT); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // TIPO ::= tbool 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(Tipos.BOOL); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // TIPO ::= tchar 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(Tipos.CHAR); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // TIPO ::= tdouble 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(Tipos.DOUBLE); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // TIPO ::= tstring 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(Tipos.STRING); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // TIPO ::= Tvoid 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(Tipos.VOID); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXPRESION ::= INI_ARRAY 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = i;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXPRESION ::= menos EXPRESION 
            {
              Expresion RESULT =null;
		RESULT=null;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXPRESION ::= EXPRESION mas EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Aritmetica(a, b, Operador.SUMA);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXPRESION ::= EXPRESION menos EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Aritmetica(a, b, Operador.RESTA);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXPRESION ::= EXPRESION por EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Aritmetica(a, b, Operador.MULTIPLICACION);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXPRESION ::= EXPRESION div EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Aritmetica(a, b, Operador.DIVISION);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXPRESION ::= EXPRESION mod EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Aritmetica(a, b, Operador.MODULO);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EXPRESION ::= pot para EXPRESION coma EXPRESION parc 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Aritmetica(a, b, Operador.POTENCIA);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // EXPRESION ::= EXPRESION mayor_que EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Relacional(a, b, Operador.MAYOR_QUE);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // EXPRESION ::= EXPRESION menor_que EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Relacional(a, b, Operador.MENOR_QUE);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // EXPRESION ::= EXPRESION igual_que EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Relacional(a, b, Operador.IGUAL_IGUAL);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // EXPRESION ::= EXPRESION mayor_igual EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Relacional(a, b, Operador.MAYOR_IGUAL);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // EXPRESION ::= EXPRESION menor_igual EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Relacional(a, b, Operador.MENOR_IGUAL);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // EXPRESION ::= EXPRESION diferente_que EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Relacional(a, b, Operador.DIFERENTE_QUE);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // EXPRESION ::= EXPRESION Tor EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Logica(a, b, Operador.OR);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // EXPRESION ::= EXPRESION xor EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Logica(a, b, Operador.XOR);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // EXPRESION ::= EXPRESION Tand EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Logica(a, b, Operador.AND);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // EXPRESION ::= Tnot EXPRESION 
            {
              Expresion RESULT =null;
		RESULT= null; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // EXPRESION ::= EXPRESION interrogacion EXPRESION dospuntos EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= new Ternaria(a, b,c);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // EXPRESION ::= para EXPRESION parc 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT =a;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // EXPRESION ::= Tthis 
            {
              Expresion RESULT =null;
		
        RESULT =  new Identificador("this",false);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // EXPRESION ::= EXPRESION Tpunto EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		     
        RESULT = new Acceso(a,b);

    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // EXPRESION ::= Tnew ID para B parc 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new Instancia(a,b);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // EXPRESION ::= Tnew ID para parc 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
        RESULT = new Instancia(a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // EXPRESION ::= ID para parc 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
        RESULT = new Llama(a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // EXPRESION ::= ID para B parc 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new Llama(a,b);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // EXPRESION ::= num 
            {
              Expresion RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer valor = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
        RESULT = new Literal((Object)valor, new Tipo(Tipos.INT)); 
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // EXPRESION ::= decimal 
            {
              Expresion RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Double valor = (Double)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
        RESULT = new Literal((Object)valor, new Tipo(Tipos.DOUBLE)); 
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // EXPRESION ::= CHAR 
            {
              Expresion RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		char valor = (char)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Literal((Object)valor, new Tipo(Tipos.CHAR));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // EXPRESION ::= CAD 
            {
              Expresion RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Literal((Object)valor, new Tipo(Tipos.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // EXPRESION ::= ttrue 
            {
              Expresion RESULT =null;
		
        RESULT = new Literal((Object)true, new Tipo(Tipos.BOOL));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // EXPRESION ::= tfalse 
            {
              Expresion RESULT =null;
		
        RESULT = new Literal((Object)false, new Tipo(Tipos.BOOL));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // EXPRESION ::= ID DIMENSION 
            {
              Expresion RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT =  new Identificador(valor.toString(),a,false);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // EXPRESION ::= POSTFIJO 
            {
              Expresion RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion p = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = p;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // EXPRESION ::= ID 
            {
              Expresion RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT =  new Identificador(valor.toString(),false);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
