
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package inteprete;

import java.util.LinkedList;
import ast.general.NodoAST;
import ast.AST;
import java_cup.runtime.Symbol;
import ast.expresiones.Literal;
import entorno.Tipo;
import ast.general.Instruccion;
import ast.general.Expresion;
import ast.instrucciones.Bloque;
import ast.instrucciones.Declaracion;
import ast.instrucciones.PrintTabla;
import ast.instrucciones.Asignacion;
import ast.expresiones.Identificador;
import ast.expresiones.operaciones.Aritmetica;
import ast.expresiones.operaciones.Operacion.Operador;
import entorno.Tipo.Tipos;
import ast.instrucciones.Print;
import ast.expresiones.operaciones.OperadorPost;
import ast.expresiones.operaciones.Relacional;
import ast.expresiones.operaciones.Logica;
import ast.expresiones.operaciones.Ternaria;
import ast.instrucciones.If;
import ast.instrucciones.While;
import ast.instrucciones.Break;
import ast.instrucciones.For;
import ast.expresiones.Var;
import ast.expresiones.IniciarArreglo;
import ast.expresiones.generarArrreglo;
import ast.instrucciones.fantasma;
import ast.Nativo.Modificador;
import ast.instrucciones.Clase;
import ast.instrucciones.Funcion;
import ast.instrucciones.Constructor;
import ast.Nativo.Modificador.TipoMod;
import entorno.Simbolo;
import entorno.Simbolo.Rol;
import ast.expresiones.Llama;
import ast.expresiones.Return;
import ast.expresiones.Instancia;
import java.util.LinkedList;
import ast.expresiones.Acceso;
import ast.expresiones.AccesoAsig;
import ast.instrucciones.Println;
import ast.instrucciones.Continue;
import ast.instrucciones.DoWhile;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\227\000\002\002\004\000\002\002\003\000\002\041" +
    "\004\000\002\033\004\000\002\033\003\000\002\052\004" +
    "\000\002\052\003\000\002\051\003\000\002\051\003\000" +
    "\002\051\003\000\002\051\003\000\002\056\006\000\002" +
    "\060\005\000\002\060\003\000\002\061\003\000\002\034" +
    "\010\000\002\034\012\000\002\045\003\000\002\045\002" +
    "\000\002\035\004\000\002\035\003\000\002\037\005\000" +
    "\002\053\012\000\002\054\003\000\002\054\002\000\002" +
    "\047\005\000\002\047\003\000\002\055\005\000\002\055" +
    "\004\000\002\057\005\000\002\057\003\000\002\042\006" +
    "\000\002\042\004\000\002\043\002\000\002\043\011\000" +
    "\002\043\010\000\002\043\010\000\002\043\007\000\002" +
    "\050\005\000\002\050\004\000\002\046\004\000\002\046" +
    "\003\000\002\046\002\000\002\044\003\000\002\044\003" +
    "\000\002\044\003\000\002\044\003\000\002\044\003\000" +
    "\002\044\003\000\002\006\007\000\002\006\005\000\002" +
    "\006\007\000\002\006\005\000\002\027\004\000\002\027" +
    "\003\000\002\026\003\000\002\026\004\000\002\031\005" +
    "\000\002\031\004\000\002\003\005\000\002\004\004\000" +
    "\002\004\003\000\002\005\003\000\002\005\004\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\004\000\002" +
    "\005\003\000\002\024\004\000\002\023\014\000\002\032" +
    "\003\000\002\032\003\000\002\013\007\000\002\014\007" +
    "\000\002\012\006\000\002\010\006\000\002\062\005\000" +
    "\002\062\003\000\002\062\003\000\002\062\003\000\002" +
    "\062\005\000\002\062\006\000\002\062\004\000\002\021" +
    "\004\000\002\022\004\000\002\020\013\000\002\017\011" +
    "\000\002\011\011\000\002\011\015\000\002\011\013\000" +
    "\002\016\004\000\002\016\004\000\002\025\004\000\002" +
    "\025\003\000\002\030\006\000\002\030\005\000\002\040" +
    "\005\000\002\040\005\000\002\036\005\000\002\036\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\015\003\000\002\015\004\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\010\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\004\000\002\015\007\000\002\015\005" +
    "\000\002\015\003\000\002\015\005\000\002\015\007\000" +
    "\002\015\006\000\002\015\005\000\002\015\006\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\004" +
    "\000\002\015\003\000\002\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0128\000\022\004\uffef\006\uffef\007\uffef\010\uffef\011" +
    "\uffef\012\uffef\013\uffef\015\011\001\002\000\020\004\uffd7" +
    "\006\026\007\024\010\017\011\020\012\027\013\016\001" +
    "\002\000\022\004\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0" +
    "\012\ufff0\013\ufff0\015\011\001\002\000\022\004\uffed\006" +
    "\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed\015\uffed" +
    "\001\002\000\004\002\000\001\002\000\004\002\014\001" +
    "\002\000\004\106\012\001\002\000\004\072\013\001\002" +
    "\000\022\004\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012" +
    "\uffec\013\uffec\015\uffec\001\002\000\004\002\001\001\002" +
    "\000\022\004\uffee\006\uffee\007\uffee\010\uffee\011\uffee\012" +
    "\uffee\013\uffee\015\uffee\001\002\000\036\004\uffd1\006\uffd1" +
    "\007\uffd1\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\026" +
    "\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\105\uffd1\001\002" +
    "\000\036\004\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012" +
    "\uffd4\013\uffd4\014\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4" +
    "\032\uffd4\105\uffd4\001\002\000\036\004\uffd3\006\uffd3\007" +
    "\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\026\uffd3" +
    "\027\uffd3\030\uffd3\031\uffd3\032\uffd3\105\uffd3\001\002\000" +
    "\004\004\032\001\002\000\022\002\uffff\004\uffd7\006\026" +
    "\007\024\010\017\011\020\012\027\013\016\001\002\000" +
    "\036\004\uffd8\006\026\007\024\010\017\011\020\012\027" +
    "\013\016\014\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032" +
    "\uffd8\105\uffd8\001\002\000\036\004\uffd5\006\uffd5\007\uffd5" +
    "\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\026\uffd5\027" +
    "\uffd5\030\uffd5\031\uffd5\032\uffd5\105\uffd5\001\002\000\022" +
    "\002\ufffd\004\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012" +
    "\ufffd\013\ufffd\001\002\000\036\004\uffd6\006\uffd6\007\uffd6" +
    "\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\026\uffd6\027" +
    "\uffd6\030\uffd6\031\uffd6\032\uffd6\105\uffd6\001\002\000\036" +
    "\004\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013" +
    "\uffd2\014\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2" +
    "\105\uffd2\001\002\000\022\004\uffd9\014\uffd9\026\uffd9\027" +
    "\uffd9\030\uffd9\031\uffd9\032\uffd9\105\uffd9\001\002\000\022" +
    "\002\ufffe\004\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012" +
    "\ufffe\013\ufffe\001\002\000\004\105\033\001\002\000\006" +
    "\005\035\073\034\001\002\000\042\004\uffd7\006\026\007" +
    "\024\010\017\011\020\012\027\013\016\014\uffd7\026\uffd7" +
    "\027\uffd7\030\uffd7\031\uffd7\032\uffd7\072\uffe0\073\uffe0\105" +
    "\uffd7\001\002\000\004\105\036\001\002\000\004\073\037" +
    "\001\002\000\042\004\uffd7\006\026\007\024\010\017\011" +
    "\020\012\027\013\016\014\uffd7\026\uffd7\027\uffd7\030\uffd7" +
    "\031\uffd7\032\uffd7\072\uffe0\073\uffe0\105\uffd7\001\002\000" +
    "\044\004\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7" +
    "\013\ufff7\014\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032" +
    "\ufff7\072\ufff7\073\ufff7\074\ufff7\105\ufff7\001\002\000\006" +
    "\072\u0126\073\u0125\001\002\000\022\004\032\014\052\026" +
    "\054\027\061\030\053\031\055\032\060\105\056\001\002" +
    "\000\044\004\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012" +
    "\ufff9\013\ufff9\014\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9" +
    "\032\ufff9\072\ufff9\073\ufff9\074\ufff9\105\ufff9\001\002\000" +
    "\044\004\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8" +
    "\013\ufff8\014\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032" +
    "\ufff8\072\ufff8\073\ufff8\074\ufff8\105\ufff8\001\002\000\044" +
    "\004\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013" +
    "\ufffb\014\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb" +
    "\072\ufffb\073\ufffb\074\ufffb\105\ufffb\001\002\000\044\004" +
    "\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa" +
    "\014\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\072" +
    "\ufffa\073\ufffa\074\ufffa\105\ufffa\001\002\000\044\004\uffd7" +
    "\006\026\007\024\010\017\011\020\012\027\013\016\014" +
    "\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\072\uffe0" +
    "\073\uffe0\074\051\105\uffd7\001\002\000\044\004\ufffc\006" +
    "\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc" +
    "\026\ufffc\027\ufffc\030\ufffc\031\ufffc\032\ufffc\072\ufffc\073" +
    "\ufffc\074\ufffc\105\ufffc\001\002\000\046\002\ufff1\004\ufff1" +
    "\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014" +
    "\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\072\ufff1" +
    "\073\ufff1\074\ufff1\105\ufff1\001\002\000\006\077\uff8e\105" +
    "\uff8e\001\002\000\006\077\uff92\105\uff92\001\002\000\006" +
    "\077\uff93\105\uff93\001\002\000\006\077\uff8f\105\uff8f\001" +
    "\002\000\004\067\256\001\002\000\006\077\066\105\063" +
    "\001\002\000\006\077\uff90\105\uff90\001\002\000\006\077" +
    "\uff91\105\uff91\001\002\000\010\071\uffcb\072\uffcb\105\uffcb" +
    "\001\002\000\014\067\252\071\uffca\072\uffca\077\246\105" +
    "\uffca\001\002\000\010\071\116\072\ufff4\105\115\001\002" +
    "\000\006\077\073\105\072\001\002\000\004\076\071\001" +
    "\002\000\004\072\070\001\002\000\044\004\ufff6\006\ufff6" +
    "\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\026" +
    "\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\072\ufff6\073\ufff6" +
    "\074\ufff6\105\ufff6\001\002\000\006\077\uffda\105\uffda\001" +
    "\002\000\004\067\075\001\002\000\004\076\074\001\002" +
    "\000\006\077\uffdb\105\uffdb\001\002\000\022\013\076\014" +
    "\052\026\054\027\061\030\053\031\055\032\060\070\102" +
    "\001\002\000\016\014\052\026\054\027\061\030\053\031" +
    "\055\032\060\001\002\000\006\070\uffe7\075\uffe7\001\002" +
    "\000\004\105\106\001\002\000\006\070\104\075\103\001" +
    "\002\000\006\072\uffde\073\uffde\001\002\000\020\013\076" +
    "\014\052\026\054\027\061\030\053\031\055\032\060\001" +
    "\002\000\006\072\uffdf\073\uffdf\001\002\000\006\070\uffe8" +
    "\075\uffe8\001\002\000\010\070\uffe3\075\uffe3\077\110\001" +
    "\002\000\006\070\uffe5\075\uffe5\001\002\000\004\076\111" +
    "\001\002\000\006\070\uffe4\075\uffe4\001\002\000\004\105" +
    "\106\001\002\000\006\070\uffe6\075\uffe6\001\002\000\010" +
    "\071\uffcc\072\uffcc\105\uffcc\001\002\000\012\071\uffca\072" +
    "\uffca\077\246\105\uffca\001\002\000\036\017\136\024\132" +
    "\025\126\037\122\053\133\060\130\063\123\067\117\073" +
    "\135\102\120\103\125\104\121\105\127\106\134\001\002" +
    "\000\036\017\136\024\132\025\126\037\122\053\133\060" +
    "\130\063\123\067\117\073\135\102\120\103\125\104\121" +
    "\105\127\106\134\001\002\000\056\043\uff72\044\uff72\045" +
    "\uff72\046\uff72\047\uff72\050\uff72\051\uff72\052\uff72\054\uff72" +
    "\055\uff72\056\uff72\057\uff72\060\uff72\061\uff72\062\uff72\064" +
    "\uff72\070\uff72\072\uff72\074\uff72\075\uff72\076\uff72\101\uff72" +
    "\001\002\000\056\043\uff71\044\uff71\045\uff71\046\uff71\047" +
    "\uff71\050\uff71\051\uff71\052\uff71\054\uff71\055\uff71\056\uff71" +
    "\057\uff71\060\uff71\061\uff71\062\uff71\064\uff71\070\uff71\072" +
    "\uff71\074\uff71\075\uff71\076\uff71\101\uff71\001\002\000\020" +
    "\014\052\026\054\027\061\030\053\031\055\032\060\105" +
    "\234\001\002\000\004\067\227\001\002\000\056\043\uff8d" +
    "\044\uff8d\045\uff8d\046\uff8d\047\uff8d\050\uff8d\051\uff8d\052" +
    "\uff8d\054\uff8d\055\uff8d\056\uff8d\057\uff8d\060\uff8d\061\uff8d" +
    "\062\uff8d\064\uff8d\070\uff8d\072\uff8d\074\uff8d\075\uff8d\076" +
    "\uff8d\101\uff8d\001\002\000\056\043\uff73\044\uff73\045\uff73" +
    "\046\uff73\047\uff73\050\uff73\051\uff73\052\uff73\054\uff73\055" +
    "\uff73\056\uff73\057\uff73\060\uff73\061\uff73\062\uff73\064\uff73" +
    "\070\uff73\072\uff73\074\uff73\075\uff73\076\uff73\101\uff73\001" +
    "\002\000\056\043\uff6e\044\uff6e\045\uff6e\046\uff6e\047\uff6e" +
    "\050\uff6e\051\uff6e\052\uff6e\054\uff6e\055\uff6e\056\uff6e\057" +
    "\uff6e\060\uff6e\061\uff6e\062\uff6e\064\uff6e\070\uff6e\072\uff6e" +
    "\074\uff6e\075\uff6e\076\uff6e\101\uff6e\001\002\000\066\043" +
    "\uff6b\044\uff6b\045\uff6b\046\uff6b\047\uff6b\050\uff6b\051\uff6b" +
    "\052\uff6b\054\uff6b\055\uff6b\056\uff6b\057\uff6b\060\uff6b\061" +
    "\uff6b\062\uff6b\064\uff6b\065\215\066\216\067\212\070\uff6b" +
    "\072\uff6b\074\uff6b\075\uff6b\076\uff6b\077\214\101\uff6b\001" +
    "\002\000\036\017\136\024\132\025\126\037\122\053\133" +
    "\060\130\063\123\067\117\073\135\102\120\103\125\104" +
    "\121\105\127\106\134\001\002\000\056\043\uff6c\044\uff6c" +
    "\045\uff6c\046\uff6c\047\uff6c\050\uff6c\051\uff6c\052\uff6c\054" +
    "\uff6c\055\uff6c\056\uff6c\057\uff6c\060\uff6c\061\uff6c\062\uff6c" +
    "\064\uff6c\070\uff6c\072\uff6c\074\uff6c\075\uff6c\076\uff6c\101" +
    "\uff6c\001\002\000\056\043\uff6f\044\uff6f\045\uff6f\046\uff6f" +
    "\047\uff6f\050\uff6f\051\uff6f\052\uff6f\054\uff6f\055\uff6f\056" +
    "\uff6f\057\uff6f\060\uff6f\061\uff6f\062\uff6f\064\uff6f\070\uff6f" +
    "\072\uff6f\074\uff6f\075\uff6f\076\uff6f\101\uff6f\001\002\000" +
    "\036\017\136\024\132\025\126\037\122\053\133\060\130" +
    "\063\123\067\117\073\135\102\120\103\125\104\121\105" +
    "\127\106\134\001\002\000\056\043\uff70\044\uff70\045\uff70" +
    "\046\uff70\047\uff70\050\uff70\051\uff70\052\uff70\054\uff70\055" +
    "\uff70\056\uff70\057\uff70\060\uff70\061\uff70\062\uff70\064\uff70" +
    "\070\uff70\072\uff70\074\uff70\075\uff70\076\uff70\101\uff70\001" +
    "\002\000\036\017\136\024\132\025\126\037\122\053\133" +
    "\060\130\063\123\067\117\073\135\102\120\103\125\104" +
    "\121\105\127\106\134\001\002\000\056\043\uff79\044\uff79" +
    "\045\uff79\046\uff79\047\uff79\050\uff79\051\uff79\052\uff79\054" +
    "\uff79\055\uff79\056\uff79\057\uff79\060\uff79\061\uff79\062\uff79" +
    "\064\uff79\070\uff79\072\uff79\074\uff79\075\uff79\076\uff79\101" +
    "\uff79\001\002\000\004\072\ufff5\001\002\000\044\043\151" +
    "\044\142\045\146\046\144\047\152\050\153\051\154\052" +
    "\150\054\147\056\156\057\160\060\145\061\157\062\141" +
    "\064\155\072\ufff3\101\143\001\002\000\036\017\136\024" +
    "\132\025\126\037\122\053\133\060\130\063\123\067\117" +
    "\073\135\102\120\103\125\104\121\105\127\106\134\001" +
    "\002\000\036\017\136\024\132\025\126\037\122\053\133" +
    "\060\130\063\123\067\117\073\135\102\120\103\125\104" +
    "\121\105\127\106\134\001\002\000\036\017\136\024\132" +
    "\025\126\037\122\053\133\060\130\063\123\067\117\073" +
    "\135\102\120\103\125\104\121\105\127\106\134\001\002" +
    "\000\036\017\136\024\132\025\126\037\122\053\133\060" +
    "\130\063\123\067\117\073\135\102\120\103\125\104\121" +
    "\105\127\106\134\001\002\000\036\017\136\024\132\025" +
    "\126\037\122\053\133\060\130\063\123\067\117\073\135" +
    "\102\120\103\125\104\121\105\127\106\134\001\002\000" +
    "\036\017\136\024\132\025\126\037\122\053\133\060\130" +
    "\063\123\067\117\073\135\102\120\103\125\104\121\105" +
    "\127\106\134\001\002\000\036\017\136\024\132\025\126" +
    "\037\122\053\133\060\130\063\123\067\117\073\135\102" +
    "\120\103\125\104\121\105\127\106\134\001\002\000\036" +
    "\017\136\024\132\025\126\037\122\053\133\060\130\063" +
    "\123\067\117\073\135\102\120\103\125\104\121\105\127" +
    "\106\134\001\002\000\036\017\136\024\132\025\126\037" +
    "\122\053\133\060\130\063\123\067\117\073\135\102\120" +
    "\103\125\104\121\105\127\106\134\001\002\000\036\017" +
    "\136\024\132\025\126\037\122\053\133\060\130\063\123" +
    "\067\117\073\135\102\120\103\125\104\121\105\127\106" +
    "\134\001\002\000\036\017\136\024\132\025\126\037\122" +
    "\053\133\060\130\063\123\067\117\073\135\102\120\103" +
    "\125\104\121\105\127\106\134\001\002\000\036\017\136" +
    "\024\132\025\126\037\122\053\133\060\130\063\123\067" +
    "\117\073\135\102\120\103\125\104\121\105\127\106\134" +
    "\001\002\000\036\017\136\024\132\025\126\037\122\053" +
    "\133\060\130\063\123\067\117\073\135\102\120\103\125" +
    "\104\121\105\127\106\134\001\002\000\036\017\136\024" +
    "\132\025\126\037\122\053\133\060\130\063\123\067\117" +
    "\073\135\102\120\103\125\104\121\105\127\106\134\001" +
    "\002\000\036\017\136\024\132\025\126\037\122\053\133" +
    "\060\130\063\123\067\117\073\135\102\120\103\125\104" +
    "\121\105\127\106\134\001\002\000\036\017\136\024\132" +
    "\025\126\037\122\053\133\060\130\063\123\067\117\073" +
    "\135\102\120\103\125\104\121\105\127\106\134\001\002" +
    "\000\056\043\uff8b\044\uff8b\045\uff8b\046\uff8b\047\uff8b\050" +
    "\uff8b\051\uff8b\052\uff8b\054\uff8b\055\uff8b\056\uff8b\057\uff8b" +
    "\060\uff8b\061\157\062\141\064\155\070\uff8b\072\uff8b\074" +
    "\uff8b\075\uff8b\076\uff8b\101\143\001\002\000\056\043\uff89" +
    "\044\uff89\045\uff89\046\uff89\047\uff89\050\uff89\051\uff89\052" +
    "\uff89\054\uff89\055\uff89\056\uff89\057\uff89\060\uff89\061\uff89" +
    "\062\uff89\064\uff89\070\uff89\072\uff89\074\uff89\075\uff89\076" +
    "\uff89\101\143\001\002\000\044\043\151\044\142\045\146" +
    "\046\144\047\152\050\153\051\154\052\150\054\147\055" +
    "\164\056\156\057\160\060\145\061\157\062\141\064\155" +
    "\101\143\001\002\000\036\017\136\024\132\025\126\037" +
    "\122\053\133\060\130\063\123\067\117\073\135\102\120" +
    "\103\125\104\121\105\127\106\134\001\002\000\056\043" +
    "\151\044\142\045\146\046\144\047\152\050\153\051\154" +
    "\052\150\054\147\055\uff7b\056\156\057\160\060\145\061" +
    "\157\062\141\064\155\070\uff7b\072\uff7b\074\uff7b\075\uff7b" +
    "\076\uff7b\101\143\001\002\000\056\043\uff87\044\uff87\045" +
    "\uff87\046\uff87\047\uff87\050\uff87\051\uff87\052\uff87\054\uff87" +
    "\055\uff87\056\uff87\057\uff87\060\uff87\061\uff87\062\uff87\064" +
    "\uff87\070\uff87\072\uff87\074\uff87\075\uff87\076\uff87\101\143" +
    "\001\002\000\056\043\151\044\142\045\146\046\144\047" +
    "\152\050\153\051\uff7f\052\150\054\147\055\uff7f\056\uff7f" +
    "\057\160\060\145\061\157\062\141\064\155\070\uff7f\072" +
    "\uff7f\074\uff7f\075\uff7f\076\uff7f\101\143\001\002\000\056" +
    "\043\uff82\044\uff82\045\uff82\046\uff82\047\uff82\050\uff82\051" +
    "\uff82\052\uff82\054\uff82\055\uff82\056\uff82\057\160\060\145" +
    "\061\157\062\141\064\155\070\uff82\072\uff82\074\uff82\075" +
    "\uff82\076\uff82\101\143\001\002\000\056\043\uff81\044\uff81" +
    "\045\uff81\046\uff81\047\uff81\050\uff81\051\uff81\052\uff81\054" +
    "\uff81\055\uff81\056\uff81\057\160\060\145\061\157\062\141" +
    "\064\155\070\uff81\072\uff81\074\uff81\075\uff81\076\uff81\101" +
    "\143\001\002\000\056\043\uff84\044\uff84\045\uff84\046\uff84" +
    "\047\uff84\050\uff84\051\uff84\052\uff84\054\uff84\055\uff84\056" +
    "\uff84\057\160\060\145\061\157\062\141\064\155\070\uff84" +
    "\072\uff84\074\uff84\075\uff84\076\uff84\101\143\001\002\000" +
    "\056\043\151\044\142\045\146\046\144\047\152\050\153" +
    "\051\uff7d\052\uff7d\054\147\055\uff7d\056\uff7d\057\160\060" +
    "\145\061\157\062\141\064\155\070\uff7d\072\uff7d\074\uff7d" +
    "\075\uff7d\076\uff7d\101\143\001\002\000\056\043\151\044" +
    "\142\045\146\046\144\047\152\050\153\051\uff7e\052\uff7e" +
    "\054\uff7e\055\uff7e\056\uff7e\057\160\060\145\061\157\062" +
    "\141\064\155\070\uff7e\072\uff7e\074\uff7e\075\uff7e\076\uff7e" +
    "\101\143\001\002\000\056\043\151\044\142\045\uff80\046" +
    "\uff80\047\152\050\153\051\uff80\052\uff80\054\uff80\055\uff80" +
    "\056\uff80\057\160\060\145\061\157\062\141\064\155\070" +
    "\uff80\072\uff80\074\uff80\075\uff80\076\uff80\101\143\001\002" +
    "\000\056\043\uff8a\044\uff8a\045\uff8a\046\uff8a\047\uff8a\050" +
    "\uff8a\051\uff8a\052\uff8a\054\uff8a\055\uff8a\056\uff8a\057\uff8a" +
    "\060\uff8a\061\157\062\141\064\155\070\uff8a\072\uff8a\074" +
    "\uff8a\075\uff8a\076\uff8a\101\143\001\002\000\056\043\151" +
    "\044\142\045\uff83\046\uff83\047\152\050\153\051\uff83\052" +
    "\uff83\054\uff83\055\uff83\056\uff83\057\160\060\145\061\157" +
    "\062\141\064\155\070\uff83\072\uff83\074\uff83\075\uff83\076" +
    "\uff83\101\143\001\002\000\056\043\uff78\044\uff78\045\uff78" +
    "\046\uff78\047\uff78\050\uff78\051\uff78\052\uff78\054\uff78\055" +
    "\uff78\056\uff78\057\uff78\060\uff78\061\uff78\062\uff78\064\uff78" +
    "\070\uff78\072\uff78\074\uff78\075\uff78\076\uff78\101\uff78\001" +
    "\002\000\056\043\uff85\044\uff85\045\uff85\046\uff85\047\uff85" +
    "\050\uff85\051\uff85\052\uff85\054\uff85\055\uff85\056\uff85\057" +
    "\160\060\145\061\157\062\141\064\155\070\uff85\072\uff85" +
    "\074\uff85\075\uff85\076\uff85\101\143\001\002\000\056\043" +
    "\uff88\044\uff88\045\uff88\046\uff88\047\uff88\050\uff88\051\uff88" +
    "\052\uff88\054\uff88\055\uff88\056\uff88\057\uff88\060\uff88\061" +
    "\uff88\062\uff88\064\uff88\070\uff88\072\uff88\074\uff88\075\uff88" +
    "\076\uff88\101\143\001\002\000\006\074\205\075\206\001" +
    "\002\000\050\043\151\044\142\045\146\046\144\047\152" +
    "\050\153\051\154\052\150\054\147\056\156\057\160\060" +
    "\145\061\157\062\141\064\155\070\uff94\074\uff94\075\uff94" +
    "\101\143\001\002\000\056\043\uff97\044\uff97\045\uff97\046" +
    "\uff97\047\uff97\050\uff97\051\uff97\052\uff97\054\uff97\055\uff97" +
    "\056\uff97\057\uff97\060\uff97\061\uff97\062\uff97\064\uff97\070" +
    "\uff97\072\uff97\074\uff97\075\uff97\076\uff97\101\uff97\001\002" +
    "\000\036\017\136\024\132\025\126\037\122\053\133\060" +
    "\130\063\123\067\117\073\135\102\120\103\125\104\121" +
    "\105\127\106\134\001\002\000\050\043\151\044\142\045" +
    "\146\046\144\047\152\050\153\051\154\052\150\054\147" +
    "\056\156\057\160\060\145\061\157\062\141\064\155\070" +
    "\uff95\074\uff95\075\uff95\101\143\001\002\000\056\043\uff7c" +
    "\044\uff7c\045\uff7c\046\uff7c\047\uff7c\050\uff7c\051\uff7c\052" +
    "\uff7c\054\uff7c\055\uff7c\056\uff7c\057\uff7c\060\uff7c\061\uff7c" +
    "\062\uff7c\064\uff7c\070\uff7c\072\uff7c\074\uff7c\075\uff7c\076" +
    "\uff7c\101\143\001\002\000\056\043\uff8c\044\uff8c\045\uff8c" +
    "\046\uff8c\047\uff8c\050\uff8c\051\uff8c\052\uff8c\054\uff8c\055" +
    "\uff8c\056\uff8c\057\uff8c\060\uff8c\061\uff8c\062\uff8c\064\uff8c" +
    "\070\uff8c\072\uff8c\074\uff8c\075\uff8c\076\uff8c\101\143\001" +
    "\002\000\040\017\136\024\132\025\126\037\122\053\133" +
    "\060\130\063\123\067\117\070\224\073\135\102\120\103" +
    "\125\104\121\105\127\106\134\001\002\000\060\043\uff6d" +
    "\044\uff6d\045\uff6d\046\uff6d\047\uff6d\050\uff6d\051\uff6d\052" +
    "\uff6d\054\uff6d\055\uff6d\056\uff6d\057\uff6d\060\uff6d\061\uff6d" +
    "\062\uff6d\064\uff6d\070\uff6d\072\uff6d\074\uff6d\075\uff6d\076" +
    "\uff6d\077\221\101\uff6d\001\002\000\036\017\136\024\132" +
    "\025\126\037\122\053\133\060\130\063\123\067\117\073" +
    "\135\102\120\103\125\104\121\105\127\106\134\001\002" +
    "\000\056\043\uff9d\044\uff9d\045\uff9d\046\uff9d\047\uff9d\050" +
    "\uff9d\051\uff9d\052\uff9d\054\uff9d\055\uff9d\056\uff9d\057\uff9d" +
    "\060\uff9d\061\uff9d\062\uff9d\064\uff9d\070\uff9d\072\uff9d\074" +
    "\uff9d\075\uff9d\076\uff9d\101\uff9d\001\002\000\056\043\uff9c" +
    "\044\uff9c\045\uff9c\046\uff9c\047\uff9c\050\uff9c\051\uff9c\052" +
    "\uff9c\054\uff9c\055\uff9c\056\uff9c\057\uff9c\060\uff9c\061\uff9c" +
    "\062\uff9c\064\uff9c\070\uff9c\072\uff9c\074\uff9c\075\uff9c\076" +
    "\uff9c\101\uff9c\001\002\000\044\043\151\044\142\045\146" +
    "\046\144\047\152\050\153\051\154\052\150\054\147\056" +
    "\156\057\160\060\145\061\157\062\141\064\155\076\220" +
    "\101\143\001\002\000\062\043\uff98\044\uff98\045\uff98\046" +
    "\uff98\047\uff98\050\uff98\051\uff98\052\uff98\054\uff98\055\uff98" +
    "\056\uff98\057\uff98\060\uff98\061\uff98\062\uff98\064\uff98\070" +
    "\uff98\071\uff98\072\uff98\074\uff98\075\uff98\076\uff98\077\uff98" +
    "\101\uff98\001\002\000\036\017\136\024\132\025\126\037" +
    "\122\053\133\060\130\063\123\067\117\073\135\102\120" +
    "\103\125\104\121\105\127\106\134\001\002\000\044\043" +
    "\151\044\142\045\146\046\144\047\152\050\153\051\154" +
    "\052\150\054\147\056\156\057\160\060\145\061\157\062" +
    "\141\064\155\076\223\101\143\001\002\000\062\043\uff99" +
    "\044\uff99\045\uff99\046\uff99\047\uff99\050\uff99\051\uff99\052" +
    "\uff99\054\uff99\055\uff99\056\uff99\057\uff99\060\uff99\061\uff99" +
    "\062\uff99\064\uff99\070\uff99\071\uff99\072\uff99\074\uff99\075" +
    "\uff99\076\uff99\077\uff99\101\uff99\001\002\000\056\043\uff75" +
    "\044\uff75\045\uff75\046\uff75\047\uff75\050\uff75\051\uff75\052" +
    "\uff75\054\uff75\055\uff75\056\uff75\057\uff75\060\uff75\061\uff75" +
    "\062\uff75\064\uff75\070\uff75\072\uff75\074\uff75\075\uff75\076" +
    "\uff75\101\uff75\001\002\000\006\070\226\075\206\001\002" +
    "\000\056\043\uff74\044\uff74\045\uff74\046\uff74\047\uff74\050" +
    "\uff74\051\uff74\052\uff74\054\uff74\055\uff74\056\uff74\057\uff74" +
    "\060\uff74\061\uff74\062\uff74\064\uff74\070\uff74\072\uff74\074" +
    "\uff74\075\uff74\076\uff74\101\uff74\001\002\000\036\017\136" +
    "\024\132\025\126\037\122\053\133\060\130\063\123\067" +
    "\117\073\135\102\120\103\125\104\121\105\127\106\134" +
    "\001\002\000\044\043\151\044\142\045\146\046\144\047" +
    "\152\050\153\051\154\052\150\054\147\056\156\057\160" +
    "\060\145\061\157\062\141\064\155\075\231\101\143\001" +
    "\002\000\036\017\136\024\132\025\126\037\122\053\133" +
    "\060\130\063\123\067\117\073\135\102\120\103\125\104" +
    "\121\105\127\106\134\001\002\000\044\043\151\044\142" +
    "\045\146\046\144\047\152\050\153\051\154\052\150\054" +
    "\147\056\156\057\160\060\145\061\157\062\141\064\155" +
    "\070\233\101\143\001\002\000\056\043\uff86\044\uff86\045" +
    "\uff86\046\uff86\047\uff86\050\uff86\051\uff86\052\uff86\054\uff86" +
    "\055\uff86\056\uff86\057\uff86\060\uff86\061\uff86\062\uff86\064" +
    "\uff86\070\uff86\072\uff86\074\uff86\075\uff86\076\uff86\101\uff86" +
    "\001\002\000\004\067\237\001\002\000\004\077\214\001" +
    "\002\000\060\043\uff96\044\uff96\045\uff96\046\uff96\047\uff96" +
    "\050\uff96\051\uff96\052\uff96\054\uff96\055\uff96\056\uff96\057" +
    "\uff96\060\uff96\061\uff96\062\uff96\064\uff96\070\uff96\072\uff96" +
    "\074\uff96\075\uff96\076\uff96\077\221\101\uff96\001\002\000" +
    "\040\017\136\024\132\025\126\037\122\053\133\060\130" +
    "\063\123\067\117\070\240\073\135\102\120\103\125\104" +
    "\121\105\127\106\134\001\002\000\056\043\uff76\044\uff76" +
    "\045\uff76\046\uff76\047\uff76\050\uff76\051\uff76\052\uff76\054" +
    "\uff76\055\uff76\056\uff76\057\uff76\060\uff76\061\uff76\062\uff76" +
    "\064\uff76\070\uff76\072\uff76\074\uff76\075\uff76\076\uff76\101" +
    "\uff76\001\002\000\006\070\242\075\206\001\002\000\056" +
    "\043\uff77\044\uff77\045\uff77\046\uff77\047\uff77\050\uff77\051" +
    "\uff77\052\uff77\054\uff77\055\uff77\056\uff77\057\uff77\060\uff77" +
    "\061\uff77\062\uff77\064\uff77\070\uff77\072\uff77\074\uff77\075" +
    "\uff77\076\uff77\101\uff77\001\002\000\044\043\151\044\142" +
    "\045\146\046\144\047\152\050\153\051\154\052\150\054" +
    "\147\056\156\057\160\060\145\061\157\062\141\064\155" +
    "\070\244\101\143\001\002\000\056\043\uff7a\044\uff7a\045" +
    "\uff7a\046\uff7a\047\uff7a\050\uff7a\051\uff7a\052\uff7a\054\uff7a" +
    "\055\uff7a\056\uff7a\057\uff7a\060\uff7a\061\uff7a\062\uff7a\064" +
    "\uff7a\070\uff7a\072\uff7a\074\uff7a\075\uff7a\076\uff7a\101\uff7a" +
    "\001\002\000\012\071\uffc9\072\uffc9\077\250\105\uffc9\001" +
    "\002\000\004\076\247\001\002\000\012\071\uffc7\072\uffc7" +
    "\077\uffc7\105\uffc7\001\002\000\004\076\251\001\002\000" +
    "\012\071\uffc8\072\uffc8\077\uffc8\105\uffc8\001\002\000\022" +
    "\013\076\014\052\026\054\027\061\030\053\031\055\032" +
    "\060\070\254\001\002\000\006\070\255\075\103\001\002" +
    "\000\006\072\uffdc\073\uffdc\001\002\000\006\072\uffdd\073" +
    "\uffdd\001\002\000\022\013\076\014\052\026\054\027\061" +
    "\030\053\031\055\032\060\070\uffe9\001\002\000\004\070" +
    "\261\001\002\000\006\070\uffea\075\103\001\002\000\004" +
    "\073\262\001\002\000\054\014\052\016\266\017\265\020" +
    "\314\021\312\022\320\023\313\026\054\027\061\030\053" +
    "\031\055\032\060\033\322\035\263\036\317\040\275\041" +
    "\324\042\304\073\277\100\270\105\303\001\002\000\004" +
    "\067\u011f\001\002\000\004\105\115\001\002\000\010\071" +
    "\uffa9\072\uffa9\101\uffa9\001\002\000\040\017\136\024\132" +
    "\025\126\037\122\053\133\060\130\063\123\067\117\072" +
    "\uff9a\073\135\102\120\103\125\104\121\105\127\106\134" +
    "\001\002\000\056\014\uffbc\016\uffbc\017\uffbc\020\uffbc\021" +
    "\uffbc\022\uffbc\023\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc" +
    "\032\uffbc\033\uffbc\035\uffbc\036\uffbc\040\uffbc\041\uffbc\042" +
    "\uffbc\073\uffbc\074\uffbc\100\uffbc\105\uffbc\001\002\000\056" +
    "\014\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023" +
    "\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3" +
    "\035\uffc3\036\uffc3\040\uffc3\041\uffc3\042\uffc3\073\uffc3\074" +
    "\uffc3\100\uffc3\105\uffc3\001\002\000\056\014\uffc4\016\uffc4" +
    "\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\026\uffc4\027" +
    "\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\035\uffc4\036\uffc4" +
    "\040\uffc4\041\uffc4\042\uffc4\073\uffc4\074\uffc4\100\uffc4\105" +
    "\uffc4\001\002\000\056\014\uffbd\016\uffbd\017\uffbd\020\uffbd" +
    "\021\uffbd\022\uffbd\023\uffbd\026\uffbd\027\uffbd\030\uffbd\031" +
    "\uffbd\032\uffbd\033\uffbd\035\uffbd\036\uffbd\040\uffbd\041\uffbd" +
    "\042\uffbd\073\uffbd\074\uffbd\100\uffbd\105\uffbd\001\002\000" +
    "\010\071\u0112\072\u0118\101\u0113\001\002\000\056\014\uffb6" +
    "\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\026" +
    "\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\035\uffb6" +
    "\036\uffb6\040\uffb6\041\uffb6\042\uffb6\073\uffb6\074\uffb6\100" +
    "\uffb6\105\uffb6\001\002\000\004\067\u0105\001\002\000\056" +
    "\014\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023" +
    "\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0" +
    "\035\uffc0\036\uffc0\040\uffc0\041\uffc0\042\uffc0\073\uffc0\074" +
    "\uffc0\100\uffc0\105\uffc0\001\002\000\054\014\052\016\266" +
    "\017\265\020\314\021\312\022\320\023\313\026\054\027" +
    "\061\030\053\031\055\032\060\033\322\035\263\036\317" +
    "\040\275\041\324\042\304\073\277\100\270\105\303\001" +
    "\002\000\056\014\uffba\016\uffba\017\uffba\020\uffba\021\uffba" +
    "\022\uffba\023\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032" +
    "\uffba\033\uffba\035\uffba\036\uffba\040\uffba\041\uffba\042\uffba" +
    "\073\uffba\074\uffba\100\uffba\105\uffba\001\002\000\056\014" +
    "\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe" +
    "\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\035" +
    "\uffbe\036\uffbe\040\uffbe\041\uffbe\042\uffbe\073\uffbe\074\uffbe" +
    "\100\uffbe\105\uffbe\001\002\000\056\014\uffb9\016\uffb9\017" +
    "\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\026\uffb9\027\uffb9" +
    "\030\uffb9\031\uffb9\032\uffb9\033\uffb9\035\uffb9\036\uffb9\040" +
    "\uffb9\041\uffb9\042\uffb9\073\uffb9\074\uffb9\100\uffb9\105\uffb9" +
    "\001\002\000\022\065\215\066\216\067\371\071\uffaa\072" +
    "\uffaa\077\214\101\uffaa\105\372\001\002\000\004\073\361" +
    "\001\002\000\056\014\uffb4\016\uffb4\017\uffb4\020\uffb4\021" +
    "\uffb4\022\uffb4\023\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4" +
    "\032\uffb4\033\uffb4\035\uffb4\036\uffb4\040\uffb4\041\uffb4\042" +
    "\uffb4\073\uffb4\074\uffb4\100\uffb4\105\uffb4\001\002\000\056" +
    "\014\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023" +
    "\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1" +
    "\035\uffc1\036\uffc1\040\uffc1\041\uffc1\042\uffc1\073\uffc1\074" +
    "\uffc1\100\uffc1\105\uffc1\001\002\000\004\072\360\001\002" +
    "\000\056\014\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022" +
    "\uffb8\023\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8" +
    "\033\uffb8\035\uffb8\036\uffb8\040\uffb8\041\uffb8\042\uffb8\073" +
    "\uffb8\074\uffb8\100\uffb8\105\uffb8\001\002\000\056\014\uffbf" +
    "\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\026" +
    "\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\035\uffbf" +
    "\036\uffbf\040\uffbf\041\uffbf\042\uffbf\073\uffbf\074\uffbf\100" +
    "\uffbf\105\uffbf\001\002\000\004\067\355\001\002\000\004" +
    "\067\351\001\002\000\010\071\uffa8\072\uffa8\101\uffa8\001" +
    "\002\000\004\072\350\001\002\000\056\014\052\016\266" +
    "\017\265\020\314\021\312\022\320\023\313\026\054\027" +
    "\061\030\053\031\055\032\060\033\322\035\263\036\317" +
    "\040\275\041\324\042\304\073\277\074\347\100\270\105" +
    "\303\001\002\000\004\072\346\001\002\000\004\067\342" +
    "\001\002\000\056\014\uffbb\016\uffbb\017\uffbb\020\uffbb\021" +
    "\uffbb\022\uffbb\023\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb" +
    "\032\uffbb\033\uffbb\035\uffbb\036\uffbb\040\uffbb\041\uffbb\042" +
    "\uffbb\073\uffbb\074\uffbb\100\uffbb\105\uffbb\001\002\000\004" +
    "\067\326\001\002\000\056\014\uffb7\016\uffb7\017\uffb7\020" +
    "\uffb7\021\uffb7\022\uffb7\023\uffb7\026\uffb7\027\uffb7\030\uffb7" +
    "\031\uffb7\032\uffb7\033\uffb7\035\uffb7\036\uffb7\040\uffb7\041" +
    "\uffb7\042\uffb7\073\uffb7\074\uffb7\100\uffb7\105\uffb7\001\002" +
    "\000\004\072\325\001\002\000\056\014\uffa3\016\uffa3\017" +
    "\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3\026\uffa3\027\uffa3" +
    "\030\uffa3\031\uffa3\032\uffa3\033\uffa3\035\uffa3\036\uffa3\040" +
    "\uffa3\041\uffa3\042\uffa3\073\uffa3\074\uffa3\100\uffa3\105\uffa3" +
    "\001\002\000\036\017\136\024\132\025\126\037\122\053" +
    "\133\060\130\063\123\067\117\073\135\102\120\103\125" +
    "\104\121\105\127\106\134\001\002\000\044\043\151\044" +
    "\142\045\146\046\144\047\152\050\153\051\154\052\150" +
    "\054\147\056\156\057\160\060\145\061\157\062\141\064" +
    "\155\070\330\101\143\001\002\000\004\073\331\001\002" +
    "\000\054\014\052\016\266\017\265\020\314\021\312\022" +
    "\320\023\313\026\054\027\061\030\053\031\055\032\060" +
    "\033\322\035\263\036\317\040\275\041\324\042\304\073" +
    "\277\100\270\105\303\001\002\000\056\014\052\016\266" +
    "\017\265\020\314\021\312\022\320\023\313\026\054\027" +
    "\061\030\053\031\055\032\060\033\322\035\263\036\317" +
    "\040\275\041\324\042\304\073\277\074\334\100\270\105" +
    "\303\001\002\000\056\014\uffc5\016\uffc5\017\uffc5\020\uffc5" +
    "\021\uffc5\022\uffc5\023\uffc5\026\uffc5\027\uffc5\030\uffc5\031" +
    "\uffc5\032\uffc5\033\uffc5\035\uffc5\036\uffc5\040\uffc5\041\uffc5" +
    "\042\uffc5\073\uffc5\074\uffc5\100\uffc5\105\uffc5\001\002\000" +
    "\060\014\uffa0\016\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0" +
    "\023\uffa0\026\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0\033" +
    "\uffa0\034\335\035\uffa0\036\uffa0\040\uffa0\041\uffa0\042\uffa0" +
    "\073\uffa0\074\uffa0\100\uffa0\105\uffa0\001\002\000\006\033" +
    "\322\073\336\001\002\000\054\014\052\016\266\017\265" +
    "\020\314\021\312\022\320\023\313\026\054\027\061\030" +
    "\053\031\055\032\060\033\322\035\263\036\317\040\275" +
    "\041\324\042\304\073\277\100\270\105\303\001\002\000" +
    "\056\014\uff9e\016\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e" +
    "\023\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\032\uff9e\033" +
    "\uff9e\035\uff9e\036\uff9e\040\uff9e\041\uff9e\042\uff9e\073\uff9e" +
    "\074\uff9e\100\uff9e\105\uff9e\001\002\000\056\014\052\016" +
    "\266\017\265\020\314\021\312\022\320\023\313\026\054" +
    "\027\061\030\053\031\055\032\060\033\322\035\263\036" +
    "\317\040\275\041\324\042\304\073\277\074\341\100\270" +
    "\105\303\001\002\000\056\014\uff9f\016\uff9f\017\uff9f\020" +
    "\uff9f\021\uff9f\022\uff9f\023\uff9f\026\uff9f\027\uff9f\030\uff9f" +
    "\031\uff9f\032\uff9f\033\uff9f\035\uff9f\036\uff9f\040\uff9f\041" +
    "\uff9f\042\uff9f\073\uff9f\074\uff9f\100\uff9f\105\uff9f\001\002" +
    "\000\036\017\136\024\132\025\126\037\122\053\133\060" +
    "\130\063\123\067\117\073\135\102\120\103\125\104\121" +
    "\105\127\106\134\001\002\000\044\043\151\044\142\045" +
    "\146\046\144\047\152\050\153\051\154\052\150\054\147" +
    "\056\156\057\160\060\145\061\157\062\141\064\155\070" +
    "\344\101\143\001\002\000\004\072\345\001\002\000\056" +
    "\014\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023" +
    "\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf" +
    "\035\uffaf\036\uffaf\040\uffaf\041\uffaf\042\uffaf\073\uffaf\074" +
    "\uffaf\100\uffaf\105\uffaf\001\002\000\056\014\uffa4\016\uffa4" +
    "\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4\026\uffa4\027" +
    "\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4\035\uffa4\036\uffa4" +
    "\040\uffa4\041\uffa4\042\uffa4\073\uffa4\074\uffa4\100\uffa4\105" +
    "\uffa4\001\002\000\044\004\uffeb\006\uffeb\007\uffeb\010\uffeb" +
    "\011\uffeb\012\uffeb\013\uffeb\014\uffeb\026\uffeb\027\uffeb\030" +
    "\uffeb\031\uffeb\032\uffeb\072\uffeb\073\uffeb\074\uffeb\105\uffeb" +
    "\001\002\000\056\014\uffc2\016\uffc2\017\uffc2\020\uffc2\021" +
    "\uffc2\022\uffc2\023\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2" +
    "\032\uffc2\033\uffc2\035\uffc2\036\uffc2\040\uffc2\041\uffc2\042" +
    "\uffc2\073\uffc2\074\uffc2\100\uffc2\105\uffc2\001\002\000\036" +
    "\017\136\024\132\025\126\037\122\053\133\060\130\063" +
    "\123\067\117\073\135\102\120\103\125\104\121\105\127" +
    "\106\134\001\002\000\044\043\151\044\142\045\146\046" +
    "\144\047\152\050\153\051\154\052\150\054\147\056\156" +
    "\057\160\060\145\061\157\062\141\064\155\070\353\101" +
    "\143\001\002\000\004\072\354\001\002\000\056\014\uffae" +
    "\016\uffae\017\uffae\020\uffae\021\uffae\022\uffae\023\uffae\026" +
    "\uffae\027\uffae\030\uffae\031\uffae\032\uffae\033\uffae\035\uffae" +
    "\036\uffae\040\uffae\041\uffae\042\uffae\073\uffae\074\uffae\100" +
    "\uffae\105\uffae\001\002\000\004\070\356\001\002\000\004" +
    "\072\357\001\002\000\056\014\uffad\016\uffad\017\uffad\020" +
    "\uffad\021\uffad\022\uffad\023\uffad\026\uffad\027\uffad\030\uffad" +
    "\031\uffad\032\uffad\033\uffad\035\uffad\036\uffad\040\uffad\041" +
    "\uffad\042\uffad\073\uffad\074\uffad\100\uffad\105\uffad\001\002" +
    "\000\056\014\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022" +
    "\uffb5\023\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5" +
    "\033\uffb5\035\uffb5\036\uffb5\040\uffb5\041\uffb5\042\uffb5\073" +
    "\uffb5\074\uffb5\100\uffb5\105\uffb5\001\002\000\054\014\052" +
    "\016\266\017\265\020\314\021\312\022\320\023\313\026" +
    "\054\027\061\030\053\031\055\032\060\033\322\035\263" +
    "\036\317\040\275\041\324\042\304\073\277\100\270\105" +
    "\303\001\002\000\056\014\052\016\266\017\265\020\314" +
    "\021\312\022\320\023\313\026\054\027\061\030\053\031" +
    "\055\032\060\033\322\035\263\036\317\040\275\041\324" +
    "\042\304\073\277\074\363\100\270\105\303\001\002\000" +
    "\004\035\364\001\002\000\004\067\365\001\002\000\036" +
    "\017\136\024\132\025\126\037\122\053\133\060\130\063" +
    "\123\067\117\073\135\102\120\103\125\104\121\105\127" +
    "\106\134\001\002\000\044\043\151\044\142\045\146\046" +
    "\144\047\152\050\153\051\154\052\150\054\147\056\156" +
    "\057\160\060\145\061\157\062\141\064\155\070\367\101" +
    "\143\001\002\000\004\072\370\001\002\000\056\014\uffa2" +
    "\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2\023\uffa2\026" +
    "\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2\035\uffa2" +
    "\036\uffa2\040\uffa2\041\uffa2\042\uffa2\073\uffa2\074\uffa2\100" +
    "\uffa2\105\uffa2\001\002\000\040\017\136\024\132\025\126" +
    "\037\122\053\133\060\130\063\123\067\117\070\u0100\073" +
    "\135\102\120\103\125\104\121\105\127\106\134\001\002" +
    "\000\006\071\374\072\375\001\002\000\012\071\uffa5\072" +
    "\uffa5\077\221\101\uffa5\001\002\000\036\017\136\024\132" +
    "\025\126\037\122\053\133\060\130\063\123\067\117\073" +
    "\135\102\120\103\125\104\121\105\127\106\134\001\002" +
    "\000\104\014\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022" +
    "\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd" +
    "\031\uffcd\032\uffcd\033\uffcd\035\uffcd\036\uffcd\037\uffcd\040" +
    "\uffcd\041\uffcd\042\uffcd\053\uffcd\060\uffcd\063\uffcd\067\uffcd" +
    "\073\uffcd\074\uffcd\100\uffcd\102\uffcd\103\uffcd\104\uffcd\105" +
    "\uffcd\106\uffcd\001\002\000\044\043\151\044\142\045\146" +
    "\046\144\047\152\050\153\051\154\052\150\054\147\056" +
    "\156\057\160\060\145\061\157\062\141\064\155\072\377" +
    "\101\143\001\002\000\104\014\uffce\016\uffce\017\uffce\020" +
    "\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce" +
    "\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\035\uffce\036" +
    "\uffce\037\uffce\040\uffce\041\uffce\042\uffce\053\uffce\060\uffce" +
    "\063\uffce\067\uffce\073\uffce\074\uffce\100\uffce\102\uffce\103" +
    "\uffce\104\uffce\105\uffce\106\uffce\001\002\000\010\071\uffa7" +
    "\072\uffa7\101\uffa7\001\002\000\006\070\u0102\075\206\001" +
    "\002\000\010\071\uffa6\072\uffa6\101\uffa6\001\002\000\056" +
    "\014\052\016\266\017\265\020\314\021\312\022\320\023" +
    "\313\026\054\027\061\030\053\031\055\032\060\033\322" +
    "\035\263\036\317\040\275\041\324\042\304\073\277\074" +
    "\u0104\100\270\105\303\001\002\000\056\014\uffc6\016\uffc6" +
    "\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\026\uffc6\027" +
    "\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\035\uffc6\036\uffc6" +
    "\040\uffc6\041\uffc6\042\uffc6\073\uffc6\074\uffc6\100\uffc6\105" +
    "\uffc6\001\002\000\024\014\052\017\265\020\314\026\054" +
    "\027\061\030\053\031\055\032\060\105\u0106\001\002\000" +
    "\014\067\371\071\uffaa\077\214\101\uffaa\105\372\001\002" +
    "\000\036\017\uffb0\024\uffb0\025\uffb0\037\uffb0\053\uffb0\060" +
    "\uffb0\063\uffb0\067\uffb0\073\uffb0\102\uffb0\103\uffb0\104\uffb0" +
    "\105\uffb0\106\uffb0\001\002\000\006\071\u0112\101\u0113\001" +
    "\002\000\036\017\uffb1\024\uffb1\025\uffb1\037\uffb1\053\uffb1" +
    "\060\uffb1\063\uffb1\067\uffb1\073\uffb1\102\uffb1\103\uffb1\104" +
    "\uffb1\105\uffb1\106\uffb1\001\002\000\036\017\136\024\132" +
    "\025\126\037\122\053\133\060\130\063\123\067\117\073" +
    "\135\102\120\103\125\104\121\105\127\106\134\001\002" +
    "\000\044\043\151\044\142\045\146\046\144\047\152\050" +
    "\153\051\154\052\150\054\147\056\156\057\160\060\145" +
    "\061\157\062\141\064\155\072\u010c\101\143\001\002\000" +
    "\036\017\136\024\132\025\126\037\122\053\133\060\130" +
    "\063\123\067\117\073\135\102\120\103\125\104\121\105" +
    "\127\106\134\001\002\000\044\043\151\044\142\045\146" +
    "\046\144\047\152\050\153\051\154\052\150\054\147\056" +
    "\156\057\160\060\145\061\157\062\141\064\155\070\u010e" +
    "\101\143\001\002\000\004\073\u010f\001\002\000\054\014" +
    "\052\016\266\017\265\020\314\021\312\022\320\023\313" +
    "\026\054\027\061\030\053\031\055\032\060\033\322\035" +
    "\263\036\317\040\275\041\324\042\304\073\277\100\270" +
    "\105\303\001\002\000\056\014\052\016\266\017\265\020" +
    "\314\021\312\022\320\023\313\026\054\027\061\030\053" +
    "\031\055\032\060\033\322\035\263\036\317\040\275\041" +
    "\324\042\304\073\277\074\u0111\100\270\105\303\001\002" +
    "\000\056\014\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022" +
    "\uffb2\023\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2" +
    "\033\uffb2\035\uffb2\036\uffb2\040\uffb2\041\uffb2\042\uffb2\073" +
    "\uffb2\074\uffb2\100\uffb2\105\uffb2\001\002\000\036\017\136" +
    "\024\132\025\126\037\122\053\133\060\130\063\123\067" +
    "\117\073\135\102\120\103\125\104\121\105\127\106\134" +
    "\001\002\000\010\017\265\020\314\105\u0114\001\002\000" +
    "\014\067\371\071\uffaa\072\uffaa\077\214\101\uffaa\001\002" +
    "\000\010\071\uffab\072\uffab\101\uffab\001\002\000\044\043" +
    "\151\044\142\045\146\046\144\047\152\050\153\051\154" +
    "\052\150\054\147\056\156\057\160\060\145\061\157\062" +
    "\141\064\155\072\u0117\101\143\001\002\000\104\014\uffac" +
    "\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac\024" +
    "\uffac\025\uffac\026\uffac\027\uffac\030\uffac\031\uffac\032\uffac" +
    "\033\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041\uffac\042" +
    "\uffac\053\uffac\060\uffac\063\uffac\067\uffac\073\uffac\074\uffac" +
    "\100\uffac\102\uffac\103\uffac\104\uffac\105\uffac\106\uffac\001" +
    "\002\000\056\014\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3" +
    "\022\uffb3\023\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032" +
    "\uffb3\033\uffb3\035\uffb3\036\uffb3\040\uffb3\041\uffb3\042\uffb3" +
    "\073\uffb3\074\uffb3\100\uffb3\105\uffb3\001\002\000\044\043" +
    "\151\044\142\045\146\046\144\047\152\050\153\051\154" +
    "\052\150\054\147\056\156\057\160\060\145\061\157\062" +
    "\141\064\155\072\uff9b\101\143\001\002\000\010\071\u011b" +
    "\072\u011c\105\115\001\002\000\036\017\136\024\132\025" +
    "\126\037\122\053\133\060\130\063\123\067\117\073\135" +
    "\102\120\103\125\104\121\105\127\106\134\001\002\000" +
    "\104\014\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf" +
    "\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031" +
    "\uffcf\032\uffcf\033\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf" +
    "\041\uffcf\042\uffcf\053\uffcf\060\uffcf\063\uffcf\067\uffcf\073" +
    "\uffcf\074\uffcf\100\uffcf\102\uffcf\103\uffcf\104\uffcf\105\uffcf" +
    "\106\uffcf\001\002\000\044\043\151\044\142\045\146\046" +
    "\144\047\152\050\153\051\154\052\150\054\147\056\156" +
    "\057\160\060\145\061\157\062\141\064\155\072\u011e\101" +
    "\143\001\002\000\104\014\uffd0\016\uffd0\017\uffd0\020\uffd0" +
    "\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027" +
    "\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\035\uffd0\036\uffd0" +
    "\037\uffd0\040\uffd0\041\uffd0\042\uffd0\053\uffd0\060\uffd0\063" +
    "\uffd0\067\uffd0\073\uffd0\074\uffd0\100\uffd0\102\uffd0\103\uffd0" +
    "\104\uffd0\105\uffd0\106\uffd0\001\002\000\036\017\136\024" +
    "\132\025\126\037\122\053\133\060\130\063\123\067\117" +
    "\073\135\102\120\103\125\104\121\105\127\106\134\001" +
    "\002\000\044\043\151\044\142\045\146\046\144\047\152" +
    "\050\153\051\154\052\150\054\147\056\156\057\160\060" +
    "\145\061\157\062\141\064\155\070\u0121\101\143\001\002" +
    "\000\004\073\u0122\001\002\000\054\014\052\016\266\017" +
    "\265\020\314\021\312\022\320\023\313\026\054\027\061" +
    "\030\053\031\055\032\060\033\322\035\263\036\317\040" +
    "\275\041\324\042\304\073\277\100\270\105\303\001\002" +
    "\000\056\014\052\016\266\017\265\020\314\021\312\022" +
    "\320\023\313\026\054\027\061\030\053\031\055\032\060" +
    "\033\322\035\263\036\317\040\275\041\324\042\304\073" +
    "\277\074\u0124\100\270\105\303\001\002\000\056\014\uffa1" +
    "\016\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1\026" +
    "\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1\035\uffa1" +
    "\036\uffa1\040\uffa1\041\uffa1\042\uffa1\073\uffa1\074\uffa1\100" +
    "\uffa1\105\uffa1\001\002\000\054\014\052\016\266\017\265" +
    "\020\314\021\312\022\320\023\313\026\054\027\061\030" +
    "\053\031\055\032\060\033\322\035\263\036\317\040\275" +
    "\041\324\042\304\073\277\100\270\105\303\001\002\000" +
    "\044\004\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1" +
    "\013\uffe1\014\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032" +
    "\uffe1\072\uffe1\073\uffe1\074\uffe1\105\uffe1\001\002\000\056" +
    "\014\052\016\266\017\265\020\314\021\312\022\320\023" +
    "\313\026\054\027\061\030\053\031\055\032\060\033\322" +
    "\035\263\036\317\040\275\041\324\042\304\073\277\074" +
    "\u0128\100\270\105\303\001\002\000\044\004\uffe2\006\uffe2" +
    "\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\026" +
    "\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\072\uffe2\073\uffe2" +
    "\074\uffe2\105\uffe2\001\002\000\044\004\uffd7\006\026\007" +
    "\024\010\017\011\020\012\027\013\016\014\uffd7\026\uffd7" +
    "\027\uffd7\030\uffd7\031\uffd7\032\uffd7\072\uffe0\073\uffe0\074" +
    "\u012a\105\uffd7\001\002\000\046\002\ufff2\004\ufff2\006\ufff2" +
    "\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\026" +
    "\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\072\ufff2\073\ufff2" +
    "\074\ufff2\105\ufff2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0128\000\014\002\007\035\004\037\005\041\006\045" +
    "\003\001\001\000\012\033\021\034\024\044\022\046\020" +
    "\001\001\000\004\037\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\034\030\044\022\046\020\001" +
    "\001\000\004\044\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\034\045\042\043\043\040\044\022\046\041\051" +
    "\044\052\u0128\053\042\056\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\034\045\042\043\043\040\044" +
    "\022\046\041\051\044\052\046\053\042\056\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\034\045\042\043\043\040\044" +
    "\022\046\041\051\047\053\042\056\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\026\061\027\063\050\064\060\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\244\001\001\000\004\026\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\077\047\100\055\076\001\001" +
    "\000\004\007\111\001\001\000\002\001\001\000\004\057" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\077\055\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\057\112\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\244\001\001\000\012" +
    "\015\137\016\130\040\123\061\136\001\001\000\010\015" +
    "\242\016\130\040\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\234\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\212\001\001\000\010\015\210\016\130\040\123\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\015\207" +
    "\016\130\040\123\001\001\000\002\001\001\000\012\015" +
    "\203\016\130\036\202\040\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\015\201\016" +
    "\130\040\123\001\001\000\010\015\200\016\130\040\123" +
    "\001\001\000\010\015\177\016\130\040\123\001\001\000" +
    "\010\015\176\016\130\040\123\001\001\000\010\015\175" +
    "\016\130\040\123\001\001\000\010\015\174\016\130\040" +
    "\123\001\001\000\010\015\173\016\130\040\123\001\001" +
    "\000\010\015\172\016\130\040\123\001\001\000\010\015" +
    "\171\016\130\040\123\001\001\000\010\015\170\016\130" +
    "\040\123\001\001\000\010\015\167\016\130\040\123\001" +
    "\001\000\010\015\166\016\130\040\123\001\001\000\010" +
    "\015\165\016\130\040\123\001\001\000\010\015\162\016" +
    "\130\040\123\001\001\000\010\015\161\016\130\040\123" +
    "\001\001\000\010\015\160\016\130\040\123\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\015\164\016\130\040\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\015\206\016\130\040\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\015\203\016\130" +
    "\036\224\040\123\001\001\000\002\001\001\000\010\015" +
    "\216\016\130\040\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\015" +
    "\221\016\130\040\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\015\227\016\130\040\123\001\001\000\002" +
    "\001\001\000\010\015\231\016\130\040\123\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\235\001\001\000\002\001\001\000\012\015\203\016" +
    "\130\036\240\040\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\077\047" +
    "\252\055\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\007\077\047\257\054\256\055" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\003\301\004\315\005\270\006\320\007" +
    "\263\010\307\011\266\012\277\013\322\014\273\016\306" +
    "\017\305\020\275\021\300\022\271\023\310\024\304\025" +
    "\314\062\272\001\001\000\002\001\001\000\006\026\061" +
    "\027\u0119\001\001\000\002\001\001\000\010\015\u0118\016" +
    "\130\040\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\003\301\004\u0102\005\270\006\320\007\263\010\307\011" +
    "\266\012\277\013\322\014\273\016\306\017\305\020\275" +
    "\021\300\022\271\023\310\024\304\025\314\062\272\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\030\372\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\003\301\005\332" +
    "\006\320\007\263\010\307\011\266\012\277\013\322\014" +
    "\273\016\306\017\305\020\275\021\300\022\271\023\310" +
    "\024\304\025\314\062\272\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\015" +
    "\326\016\130\040\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\003\301\004\331\005\270\006\320\007" +
    "\263\010\307\011\266\012\277\013\322\014\273\016\306" +
    "\017\305\020\275\021\300\022\271\023\310\024\304\025" +
    "\314\062\272\001\001\000\046\003\301\005\332\006\320" +
    "\007\263\010\307\011\266\012\277\013\322\014\273\016" +
    "\306\017\305\020\275\021\300\022\271\023\310\024\304" +
    "\025\314\062\272\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\336\001\001\000\050\003\301\004\337" +
    "\005\270\006\320\007\263\010\307\011\266\012\277\013" +
    "\322\014\273\016\306\017\305\020\275\021\300\022\271" +
    "\023\310\024\304\025\314\062\272\001\001\000\002\001" +
    "\001\000\046\003\301\005\332\006\320\007\263\010\307" +
    "\011\266\012\277\013\322\014\273\016\306\017\305\020" +
    "\275\021\300\022\271\023\310\024\304\025\314\062\272" +
    "\001\001\000\002\001\001\000\010\015\342\016\130\040" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\015\351\016\130\040\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\050\003\301\004\361\005\270\006\320\007\263\010" +
    "\307\011\266\012\277\013\322\014\273\016\306\017\305" +
    "\020\275\021\300\022\271\023\310\024\304\025\314\062" +
    "\272\001\001\000\046\003\301\005\332\006\320\007\263" +
    "\010\307\011\266\012\277\013\322\014\273\016\306\017" +
    "\305\020\275\021\300\022\271\023\310\024\304\025\314" +
    "\062\272\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\015\365\016\130\040\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\015\203\016" +
    "\130\036\u0100\040\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\015\375\016\130\040\123\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\003" +
    "\301\005\332\006\320\007\263\010\307\011\266\012\277" +
    "\013\322\014\273\016\306\017\305\020\275\021\300\022" +
    "\271\023\310\024\304\025\314\062\272\001\001\000\002" +
    "\001\001\000\014\006\u0108\007\263\010\u0106\032\u0109\062" +
    "\u0107\001\001\000\004\030\372\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\015\u010a\016" +
    "\130\040\123\001\001\000\002\001\001\000\010\015\u010c" +
    "\016\130\040\123\001\001\000\002\001\001\000\002\001" +
    "\001\000\050\003\301\004\u010f\005\270\006\320\007\263" +
    "\010\307\011\266\012\277\013\322\014\273\016\306\017" +
    "\305\020\275\021\300\022\271\023\310\024\304\025\314" +
    "\062\272\001\001\000\046\003\301\005\332\006\320\007" +
    "\263\010\307\011\266\012\277\013\322\014\273\016\306" +
    "\017\305\020\275\021\300\022\271\023\310\024\304\025" +
    "\314\062\272\001\001\000\002\001\001\000\010\015\u0115" +
    "\016\130\040\123\001\001\000\004\062\u0114\001\001\000" +
    "\004\030\372\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\113\001\001\000\010\015\u011c\016\130\040\123" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\015\u011f\016\130\040\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\003\301\004\u0122\005" +
    "\270\006\320\007\263\010\307\011\266\012\277\013\322" +
    "\014\273\016\306\017\305\020\275\021\300\022\271\023" +
    "\310\024\304\025\314\062\272\001\001\000\046\003\301" +
    "\005\332\006\320\007\263\010\307\011\266\012\277\013" +
    "\322\014\273\016\306\017\305\020\275\021\300\022\271" +
    "\023\310\024\304\025\314\062\272\001\001\000\002\001" +
    "\001\000\050\003\301\004\u0126\005\270\006\320\007\263" +
    "\010\307\011\266\012\277\013\322\014\273\016\306\017" +
    "\305\020\275\021\300\022\271\023\310\024\304\025\314" +
    "\062\272\001\001\000\002\001\001\000\046\003\301\005" +
    "\332\006\320\007\263\010\307\011\266\012\277\013\322" +
    "\014\273\016\306\017\305\020\275\021\300\022\271\023" +
    "\310\024\304\025\314\062\272\001\001\000\002\001\001" +
    "\000\022\034\045\042\043\043\040\044\022\046\041\051" +
    "\047\053\042\056\037\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public static AST arbol;

    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
        System.out.println("1) Error en la Línea "+  (s.right)+ " Columna "+s.left +". Identificador "+
        s.value  +" no reconocido." );
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error en la Línea "  +(s.right)+ " Columna "+s.left+". +Identificador " +
        s.value + " no reconocido.");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {




  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= ini 
            {
              Object RESULT =null;
		System.out.println("TERMINO GRAMATICA");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ini ::= IMPORT_NULL LISTACLASES 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> e = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        parser.arbol = new AST(e);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LISTACLASES ::= LISTACLASES CLASE 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Clase b = (Clase)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = a;
        RESULT.addLast(b);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTACLASES",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LISTACLASES ::= CLASE 
            {
              LinkedList<NodoAST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Clase e = (Clase)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new LinkedList();
        RESULT.addLast(e);        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTACLASES",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ELEMENTOS_CLASE ::= ELEMENTOS_CLASE class_body_dec 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = a;
        RESULT.addLast(b);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_CLASE",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ELEMENTOS_CLASE ::= class_body_dec 
            {
              LinkedList<NodoAST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST e = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new LinkedList();
        RESULT.addLast(e);        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_CLASE",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // class_body_dec ::= CLASE 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Clase a = (Clase)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = a;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("class_body_dec",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // class_body_dec ::= constructor_declaration 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Constructor a = (Constructor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
        RESULT = a;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("class_body_dec",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // class_body_dec ::= method_declaration 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Funcion a = (Funcion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = a;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("class_body_dec",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // class_body_dec ::= ATRIBUTOS 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = a;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("class_body_dec",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ATRIBUTOS ::= MODIFICADORES_NULL TIPO DECLARACION_ATRIBUTO pcoma 
            {
              NodoAST RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Declaracion a = (Declaracion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        a.setTipo(t);
        RESULT = a;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLARACION_ATRIBUTO ::= LISTA_VAR igual VARIABLE_INICIALIZAR 
            {
              Declaracion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Var> a = (LinkedList<Var>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Declaracion(a,b);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_ATRIBUTO",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARACION_ATRIBUTO ::= LISTA_VAR 
            {
              Declaracion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Var> a = (LinkedList<Var>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Declaracion(a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_ATRIBUTO",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VARIABLE_INICIALIZAR ::= EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLE_INICIALIZAR",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CLASE ::= MODIFICADORES_NULL Tclass ID llavea ELEMENTOS_CLASE llavec 
            {
              Clase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Modificador> a = (LinkedList<Modificador>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> c = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        LinkedList<Instruccion> declaraciones = new LinkedList();
        LinkedList<Funcion> funciones =new LinkedList();
        LinkedList<Constructor> constructores = new LinkedList();
        LinkedList<Clase> jerarqua = new LinkedList();
        for(NodoAST nodo : c)
        {
            if(nodo instanceof Funcion)
            {
                funciones.addLast((Funcion)nodo);
            }
            else if(nodo instanceof Declaracion)
            {
                declaraciones.addLast((Declaracion)nodo);
            }
            else if(nodo instanceof Asignacion)
            {
                declaraciones.addLast((Asignacion)nodo);
            }
            else if(nodo instanceof Constructor)
            {
                constructores.addLast((Constructor)nodo);
            }
            else if(nodo instanceof Clase)
            {
                jerarqua.addLast((Clase)nodo);
            }
        }
        RESULT = new Clase(Rol.CLASE,a,declaraciones,funciones,constructores,b.toString(),jerarqua);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASE",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CLASE ::= MODIFICADORES_NULL Tclass ID Textends ID llavea ELEMENTOS_CLASE llavec 
            {
              Clase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		LinkedList<Modificador> a = (LinkedList<Modificador>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int extleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int extright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String ext = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> c = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        LinkedList<Instruccion> declaraciones = new LinkedList();
        LinkedList<Funcion> funciones =new LinkedList();
        LinkedList<Constructor> constructores = new LinkedList();
        LinkedList<Clase> jerarqua = new LinkedList();
        for(NodoAST nodo : c)
        {
            if(nodo instanceof Funcion)
            {
                funciones.addLast((Funcion)nodo);
            }
            else if(nodo instanceof Declaracion)
            {
                declaraciones.addLast((Declaracion)nodo);
            }
            else if(nodo instanceof Asignacion)
            {
                declaraciones.addLast((Asignacion)nodo);
            }
            else if(nodo instanceof Constructor)
            {
                constructores.addLast((Constructor)nodo);
            }
            else if(nodo instanceof Clase)
            {
                jerarqua.addLast((Clase)nodo);
            }
        }
        RESULT = new Clase(a,declaraciones,funciones,constructores,b.toString(),jerarqua,ext);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASE",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IMPORT_NULL ::= LISTAIMPORT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORT_NULL",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IMPORT_NULL ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORT_NULL",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LISTAIMPORT ::= LISTAIMPORT IMPORT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAIMPORT",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LISTAIMPORT ::= IMPORT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAIMPORT",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // IMPORT ::= Timport CAD pcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORT",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // constructor_declaration ::= MODIFICADORES_NULL ID para PARAMETERS_NULL parc llavea BLOQUE llavec 
            {
              Constructor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		LinkedList<Modificador> a = (LinkedList<Modificador>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Simbolo> c = (LinkedList<Simbolo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> d = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new Constructor(Rol.CONSTRUCTOR,a,c,d,b.toString());
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("constructor_declaration",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PARAMETERS_NULL ::= formal_parameters 
            {
              LinkedList<Simbolo> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Simbolo> b = (LinkedList<Simbolo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
       RESULT = b;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETERS_NULL",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PARAMETERS_NULL ::= 
            {
              LinkedList<Simbolo> RESULT =null;
		
       RESULT = new LinkedList();
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETERS_NULL",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // formal_parameters ::= formal_parameters coma formal_parameter 
            {
              LinkedList<Simbolo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Simbolo> a = (LinkedList<Simbolo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Simbolo b = (Simbolo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
        RESULT = a;
        RESULT.addLast(b);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("formal_parameters",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // formal_parameters ::= formal_parameter 
            {
              LinkedList<Simbolo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Simbolo a = (Simbolo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new LinkedList();
        RESULT.addLast(a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("formal_parameters",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // formal_parameter ::= Tfinal TIPO variable_declarator_id 
            {
              Simbolo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Simbolo b = (Simbolo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Simbolo(b.getIdentificador(),b.getRol(),a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("formal_parameter",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // formal_parameter ::= TIPO variable_declarator_id 
            {
              Simbolo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Simbolo b = (Simbolo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Simbolo(b.getIdentificador(),b.getRol(),a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("formal_parameter",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // variable_declarator_id ::= ID cora corc 
            {
              Simbolo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
        RESULT = new Simbolo(a.toString(),Rol.ARREGLO);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variable_declarator_id",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // variable_declarator_id ::= ID 
            {
              Simbolo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Simbolo(a.toString(),Rol.VARIABLE);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variable_declarator_id",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // method_declaration ::= method_header llavea BLOQUE llavec 
            {
              Funcion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Funcion a = (Funcion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = a;
        RESULT.setSentencias(b);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("method_declaration",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // method_declaration ::= method_header pcoma 
            {
              Funcion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Funcion a = (Funcion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = a;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("method_declaration",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // method_header ::= 
            {
              Funcion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("method_header",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // method_header ::= MODIFICADORES_NULL TIPO method_declarator ID para formal_parameters parc 
            {
              Funcion RESULT =null;
		int modleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int modright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		LinkedList<Modificador> mod = (LinkedList<Modificador>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Tipo tip = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Integer arr = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Simbolo> par = (LinkedList<Simbolo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new Funcion(id,Rol.FUNCION,tip,mod,par,arr);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("method_header",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // method_header ::= MODIFICADORES_NULL TIPO method_declarator ID para parc 
            {
              Funcion RESULT =null;
		int modleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int modright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Modificador> mod = (LinkedList<Modificador>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Tipo tip = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Integer arr = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
        RESULT = new Funcion(id,Rol.FUNCION,tip,mod,arr);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("method_header",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // method_header ::= MODIFICADORES_NULL TIPO ID para formal_parameters parc 
            {
              Funcion RESULT =null;
		int modleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int modright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Modificador> mod = (LinkedList<Modificador>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Tipo tip = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Simbolo> par = (LinkedList<Simbolo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new Funcion(id,Rol.FUNCION,tip,mod,par,0);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("method_header",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // method_header ::= MODIFICADORES_NULL TIPO ID para parc 
            {
              Funcion RESULT =null;
		int modleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int modright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Modificador> mod = (LinkedList<Modificador>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Tipo tip = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
        Rol rol = id.equalsIgnoreCase("main") ? Rol.MAIN : Rol.FUNCION;
        RESULT = new Funcion(id,rol,tip,mod,0);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("method_header",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // method_declarator ::= method_declarator cora corc 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
       RESULT = a + 1;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("method_declarator",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // method_declarator ::= cora corc 
            {
              Integer RESULT =null;
		
       RESULT = 1;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("method_declarator",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // MODIFICADORES_NULL ::= method_modifier method_modifier 
            {
              LinkedList<Modificador> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Modificador a = (Modificador)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Modificador b = (Modificador)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new LinkedList();
        RESULT.addLast(a);
        RESULT.addLast(b);

    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MODIFICADORES_NULL",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // MODIFICADORES_NULL ::= method_modifier 
            {
              LinkedList<Modificador> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Modificador a = (Modificador)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new LinkedList();
        RESULT.addLast(a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MODIFICADORES_NULL",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // MODIFICADORES_NULL ::= 
            {
              LinkedList<Modificador> RESULT =null;
		
       RESULT = new LinkedList();
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MODIFICADORES_NULL",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // method_modifier ::= Tpublic 
            {
              Modificador RESULT =null;
		 RESULT = new Modificador(TipoMod.PUBLIC); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("method_modifier",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // method_modifier ::= Tprotected 
            {
              Modificador RESULT =null;
		 RESULT = new Modificador(TipoMod.PROTECTED); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("method_modifier",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // method_modifier ::= Tprivate 
            {
              Modificador RESULT =null;
		 RESULT = new Modificador(TipoMod.PRIVATE); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("method_modifier",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // method_modifier ::= Tabstract 
            {
              Modificador RESULT =null;
		 RESULT = new Modificador(TipoMod.ABSTRACT); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("method_modifier",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // method_modifier ::= Tstatic 
            {
              Modificador RESULT =null;
		 RESULT = new Modificador(TipoMod.STATIC); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("method_modifier",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // method_modifier ::= Tfinal 
            {
              Modificador RESULT =null;
		 RESULT = new Modificador(TipoMod.FINAL); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("method_modifier",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DEC ::= TIPO LISTA_VAR igual EXPRESION pcoma 
            {
              Instruccion RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Tipo ti = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Var> i = (LinkedList<Var>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int resleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion res = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 
        RESULT = new Declaracion(ti, i,res);        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DEC ::= TIPO LISTA_VAR pcoma 
            {
              Instruccion RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Tipo ti = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Var> i = (LinkedList<Var>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 
        RESULT = new Declaracion(ti, i);        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DEC ::= ID ID igual EXPRESION pcoma 
            {
              Instruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int iileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String ii = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int resleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion res = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new Declaracion(new Tipo(i),res, ii);   
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DEC ::= ID ID pcoma 
            {
              Instruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int iileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String ii = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new Declaracion(new Tipo(i),ii); 
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LISTA_VAR ::= LISTA_VAR VAR 
            {
              LinkedList<Var> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Var> a = (LinkedList<Var>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Var b = (Var)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
        RESULT = a;
        RESULT.addLast(b);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_VAR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LISTA_VAR ::= VAR 
            {
              LinkedList<Var> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Var a = (Var)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new LinkedList();
        RESULT.addLast(a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_VAR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // VAR ::= ID 
            {
              Var RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Var(id);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VAR",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // VAR ::= ID LISTA_CORCHETES 
            {
              Var RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Var(id,(int)l);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VAR",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LISTA_CORCHETES ::= LISTA_CORCHETES cora corc 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
        int r = (int)l+1;
        RESULT = r;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_CORCHETES",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LISTA_CORCHETES ::= cora corc 
            {
              Object RESULT =null;
		
        int r = 1;
        RESULT = r;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_CORCHETES",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // INICIAR ::= llavea BLOQUE llavec 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> e = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		        
        RESULT = new Bloque(e);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIAR",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // BLOQUE ::= BLOQUE L 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = a;
        RESULT.addLast(b);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // BLOQUE ::= L 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new LinkedList();
        RESULT.addLast(a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // L ::= fantasma 
            {
              NodoAST RESULT =null;
		
        RESULT = new fantasma();
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // L ::= SENTENCIA_RETURN pcoma 
            {
              NodoAST RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion ins = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
       RESULT = ins;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // L ::= SENTENCIA_WHILE 
            {
              NodoAST RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = ins;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // L ::= SENTENCIA_DOWHILE 
            {
              NodoAST RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = ins;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // L ::= SENTENCIA_FOR 
            {
              NodoAST RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = ins;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // L ::= SENTENCIA_BREAK 
            {
              NodoAST RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = ins;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // L ::= SENTENCIA_CONTINUE 
            {
              NodoAST RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = ins;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // L ::= SENTENCIA_IF 
            {
              NodoAST RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = ins;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // L ::= DEC 
            {
              NodoAST RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = ins;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // L ::= PRINTTABLA 
            {
              NodoAST RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
       RESULT = ins;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // L ::= INICIAR 
            {
              NodoAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = e;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // L ::= ASIGNACION 
            {
              NodoAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = e;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // L ::= PRINT 
            {
              NodoAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = e;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // L ::= PRINTLN 
            {
              NodoAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = e;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // L ::= POSTFIJO pcoma 
            {
              NodoAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = e;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // L ::= SENTENCIA_LLAMADA 
            {
              NodoAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT =  e;        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SENTENCIA_LLAMADA ::= LISTAASIGNACION pcoma 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = (Expresion) a;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_LLAMADA",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SENTENCIA_FOR ::= Tfor para FOR_INI EXPRESION pcoma EXPRESION parc llavea BLOQUE llavec 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> d = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new For(d, b,a,c);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // FOR_INI ::= DEC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = a;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR_INI",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // FOR_INI ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = a;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR_INI",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // PRINT ::= print para EXPRESION parc pcoma 
            {
              Instruccion RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion res = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
        RESULT = new Print(res);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PRINT",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // PRINTLN ::= println para EXPRESION parc pcoma 
            {
              Instruccion RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion res = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
        RESULT = new Println(res);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PRINTLN",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // PRINTTABLA ::= printtabla para parc pcoma 
            {
              Instruccion RESULT =null;
		
        RESULT = new PrintTabla();
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PRINTTABLA",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ASIGNACION ::= LISTAASIGNACION igual EXPRESION pcoma 
            {
              Instruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int resleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion res = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		          
        RESULT = new Asignacion(i,res);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LISTAASIGNACION ::= LISTAASIGNACION Tpunto LISTAASIGNACION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		      
        RESULT = new AccesoAsig(a,b);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAASIGNACION",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // LISTAASIGNACION ::= ID 
            {
              Expresion RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT =  new Identificador(valor.toString(),true);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAASIGNACION",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // LISTAASIGNACION ::= Tthis 
            {
              Expresion RESULT =null;
		
        RESULT =  new Identificador("this",true);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAASIGNACION",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LISTAASIGNACION ::= Tsuper 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAASIGNACION",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // LISTAASIGNACION ::= ID para parc 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
        RESULT = new Llama(a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAASIGNACION",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // LISTAASIGNACION ::= ID para B parc 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new Llama(a,b);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAASIGNACION",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // LISTAASIGNACION ::= ID DIMENSION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        //dimension lista de expresiones
        RESULT = new Identificador(a,b,true);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAASIGNACION",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SENTENCIA_BREAK ::= Tbreak pcoma 
            {
              Instruccion RESULT =null;
		
        RESULT = new Break();
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BREAK",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SENTENCIA_CONTINUE ::= Tcontinue pcoma 
            {
              Instruccion RESULT =null;
		
        RESULT = new Continue();
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONTINUE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SENTENCIA_DOWHILE ::= Tdo llavea BLOQUE llavec Twhile para EXPRESION parc pcoma 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
        RESULT = new DoWhile(b,a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DOWHILE",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SENTENCIA_WHILE ::= Twhile para EXPRESION parc llavea BLOQUE llavec 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new While(b,a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SENTENCIA_IF ::= Tif para EXPRESION parc llavea BLOQUE llavec 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new If(b,a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SENTENCIA_IF ::= Tif para EXPRESION parc llavea BLOQUE llavec Telse llavea BLOQUE llavec 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> c = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		

        RESULT = new If(b,a,c);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SENTENCIA_IF ::= Tif para EXPRESION parc llavea BLOQUE llavec Telse SENTENCIA_IF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new If(b,a,c);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // POSTFIJO ::= ID incremento 
            {
              Expresion RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new OperadorPost(new Identificador(valor.toString(),false),true);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("POSTFIJO",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // POSTFIJO ::= ID decremento 
            {
              Expresion RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new OperadorPost(new Identificador(valor.toString(),false),false);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("POSTFIJO",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SENTENCIA_RETURN ::= Treturn EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Return(a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETURN",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SENTENCIA_RETURN ::= Treturn 
            {
              Expresion RESULT =null;
		
        RESULT = new Return();
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETURN",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // DIMENSION ::= DIMENSION cora EXPRESION corc 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = a;
        RESULT.addLast(b);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIMENSION",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // DIMENSION ::= cora EXPRESION corc 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new LinkedList();
        RESULT.addLast(a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIMENSION",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // INI_ARRAY ::= llavea B llavec 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new IniciarArreglo(a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INI_ARRAY",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // INI_ARRAY ::= Tnew TIPO DIMENSION 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int resleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int resright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Expresion> res = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new generarArrreglo(res,t);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INI_ARRAY",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // B ::= B coma EXPRESION 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = a;
        RESULT.addLast(b);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("B",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // B ::= EXPRESION 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new LinkedList();
        RESULT.addLast(a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("B",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // TIPO ::= tint 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(Tipos.INT); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // TIPO ::= tbool 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(Tipos.BOOL); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // TIPO ::= tchar 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(Tipos.CHAR); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // TIPO ::= tdouble 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(Tipos.DOUBLE); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // TIPO ::= tstring 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(Tipos.STRING); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // TIPO ::= Tvoid 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(Tipos.VOID); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXPRESION ::= INI_ARRAY 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = i;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXPRESION ::= menos EXPRESION 
            {
              Expresion RESULT =null;
		RESULT=null;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXPRESION ::= EXPRESION mas EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Aritmetica(a, b, Operador.SUMA);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EXPRESION ::= EXPRESION menos EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Aritmetica(a, b, Operador.RESTA);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // EXPRESION ::= EXPRESION por EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Aritmetica(a, b, Operador.MULTIPLICACION);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // EXPRESION ::= EXPRESION div EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Aritmetica(a, b, Operador.DIVISION);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // EXPRESION ::= EXPRESION mod EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Aritmetica(a, b, Operador.MODULO);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // EXPRESION ::= pot para EXPRESION coma EXPRESION parc 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Aritmetica(a, b, Operador.POTENCIA);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // EXPRESION ::= EXPRESION mayor_que EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Relacional(a, b, Operador.MAYOR_QUE);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // EXPRESION ::= EXPRESION menor_que EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Relacional(a, b, Operador.MENOR_QUE);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // EXPRESION ::= EXPRESION igual_que EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Relacional(a, b, Operador.IGUAL_IGUAL);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // EXPRESION ::= EXPRESION mayor_igual EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Relacional(a, b, Operador.MAYOR_IGUAL);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // EXPRESION ::= EXPRESION menor_igual EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Relacional(a, b, Operador.MENOR_IGUAL);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // EXPRESION ::= EXPRESION diferente_que EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Relacional(a, b, Operador.DIFERENTE_QUE);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // EXPRESION ::= EXPRESION Tor EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Logica(a, b, Operador.OR);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // EXPRESION ::= EXPRESION xor EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Logica(a, b, Operador.XOR);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // EXPRESION ::= EXPRESION Tand EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Logica(a, b, Operador.AND);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // EXPRESION ::= Tnot EXPRESION 
            {
              Expresion RESULT =null;
		RESULT= null; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // EXPRESION ::= EXPRESION interrogacion EXPRESION dospuntos EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= new Ternaria(a, b,c);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // EXPRESION ::= para EXPRESION parc 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT =a;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // EXPRESION ::= Tthis 
            {
              Expresion RESULT =null;
		
        RESULT =  new Identificador("this",false);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // EXPRESION ::= EXPRESION Tpunto EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		     
        RESULT = new Acceso(a,b);

    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // EXPRESION ::= Tnew ID para B parc 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new Instancia(a,b);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // EXPRESION ::= Tnew ID para parc 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
        RESULT = new Instancia(a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // EXPRESION ::= ID para parc 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
        RESULT = new Llama(a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // EXPRESION ::= ID para B parc 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new Llama(a,b);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // EXPRESION ::= num 
            {
              Expresion RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer valor = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
        RESULT = new Literal((Object)valor, new Tipo(Tipos.INT)); 
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // EXPRESION ::= decimal 
            {
              Expresion RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Double valor = (Double)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
        RESULT = new Literal((Object)valor, new Tipo(Tipos.DOUBLE)); 
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // EXPRESION ::= CHAR 
            {
              Expresion RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		char valor = (char)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Literal((Object)valor, new Tipo(Tipos.CHAR));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // EXPRESION ::= CAD 
            {
              Expresion RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Literal((Object)valor, new Tipo(Tipos.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // EXPRESION ::= ttrue 
            {
              Expresion RESULT =null;
		
        RESULT = new Literal((Object)true, new Tipo(Tipos.BOOL));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // EXPRESION ::= tfalse 
            {
              Expresion RESULT =null;
		
        RESULT = new Literal((Object)false, new Tipo(Tipos.BOOL));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // EXPRESION ::= ID DIMENSION 
            {
              Expresion RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT =  new Identificador(valor.toString(),a,false);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // EXPRESION ::= POSTFIJO 
            {
              Expresion RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion p = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = p;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // EXPRESION ::= ID 
            {
              Expresion RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT =  new Identificador(valor.toString(),false);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
